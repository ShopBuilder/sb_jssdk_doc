{
    "docs": [
        {
            "location": "/",
            "text": "Introduction\n\n\nShopbuilder\n\n\n\n\nWe offer free online stores; an easy-to-use ecommerce website builder that delivers the site in minutes.\n\n\n\n\nSDK\n\n\n\n\nShopbuilder's sdk is typically a set of js/jQuery based functions that allows manipulation of the Shopbuilder websites.\n\n\n\n\nSdk Overview:\n   \n\n1- Inject & Position Custom Content   \n\n2- Inject CSS    \n\n3- Inject Position & validate your \nCustom Fields\n   \n\n4- Create & View your \nCustom Pages\n      \n\n5- Creates updates and deletes any type of \nMenu Links\n in the site         \n\n6- \nGenerates HTML\n that are pre-styled in the Back Office (adminstration section)      \n\n\nAnd so much more helper functions and integrations with libraries if you wish to use\n     \n\n\n\n\nLet's Get started\n\n\nPrerequisites:\n  \n\n1- Have an approved \naccount\n on the developers website \n\n2- Get \na free website\n to serve as a development store \n(make sure to use the same email address for both the developers' website account and the free store merchant's account)\n      \n\n\n\n\n\n\nThen head into the developers website and \ncreate a new app\n, pick if you are creating a theme or a feature. A theme is used to provide a new design to a store and essentially manipulates the dom/css/js, a feature can also amend the dom but usually also need to make use of the API to access data of the store.        \n\n\n\n\n\n\nWhen creating an app that have an impact on the front end of the store you'll do that by injecting \nJavascript/CSS\n files from your app directly into the store. To achieve that, every app has a widget section that allows you to inject some \nJavascript\n. Note that only theme apps has a section where you can add your \nExternal CSS link\n that is the link of the main/global css file for your app theme.          \n\n\n\n\n\n\nWhenever the app is installed on a store, this piece of Javascript is injected into the store as is. Yet this injection is not dynamic so if you need to update this piece of code your users will have to re-install your app (pending we handle app versions). For now to overcome this limitation and to also have a better code structure we advise to use this area of code to inject a loader script.             \n\n\n\n\n\n\nA loader script will take care of dynamically injecting an external script that would hold your app's logic and thus allow you to update your app on the go without the need to edit the app on the developers website.        \n\n\n\n\n\n\nhere is an example of a loader script:\n\n\n(function() {\nvar sb_website_id = window.SBsdk.SBdata.SBwebsite_data.website_id;\nvar user_id = window.SBsdk.SBdata.SBwebsite_data.user_id;\nvar user_role = window.SBsdk.SBdata.SBwebsite_data.user_role;\nvar page_id = window.SBsdk.SBdata.page.id;\nvar page_type = window.SBsdk.SBdata.page.type;\nvar action = window.SBsdk.SBdata.page.action;\nvar query_strings = SBsdk.SBdata.page.query_strings\nvar script = document.createElement('script');\nscript.async = true;\n\nvar secure = window.location.protocol === 'https:';\nscript.src = (secure ? 'https' : 'http') +\"://linktoyourscript.yourdomain.com/widget.js?sb_website_id=\"+sb_website_id+\"&user_id=\"+user_id+\"&user_role=\"+JSON.stringify(user_role)+\"&page_type=\"+page_type+\"&action=\"+action+\"&page_id=\"+page_id+\"&query_strings=\"+JSON.stringify(query_strings);\n\nvar entry = document.getElementsByTagName('script')[0];\nentry.parentNode.insertBefore(script,entry);\n\nwindow.inject_custom_data_{YourAppID} = function(){\n    return { 'wait' : '{YourAppID}' };\n}\n\nwindow.inject_css_{YourAppID}  = function(){\n    return [\n        {\n            css : 'https://linktoyourcss.yourdomain.com/app.css',\n            type : 'external'\n        }\n    ]\n};\n})();\n\n\n\n\nFeel free to use this script and replace the values according to your app's information (URIs of your codes and App ID).\n\n\nAs you can see the widget script can make use of SDK variables, functions and callbacks. Similarly to how any loaded JS is also able to make use of these.\n\n\nAlso note that you are responsible to host your codebase, make sure you host in a place that can provide SSL encryption (to avoid mixed content errors as all our live stores are delivered over https), also make sure the TTFB is low to provide the best user experience to merchants, some mechanism are in place in the SDK to timeout apps that would have a very high load time.\n\n\nFinally to test the app on your \ndevelopment store\n simply head to \nadmin/settings/app-store\n to see your app and \ninstall it\n. \n\n\nOnce this is properly done you are ready to start coding your app.",
            "title": "Set up"
        },
        {
            "location": "/#introduction",
            "text": "",
            "title": "Introduction"
        },
        {
            "location": "/#shopbuilder",
            "text": "We offer free online stores; an easy-to-use ecommerce website builder that delivers the site in minutes.",
            "title": "Shopbuilder"
        },
        {
            "location": "/#sdk",
            "text": "Shopbuilder's sdk is typically a set of js/jQuery based functions that allows manipulation of the Shopbuilder websites.   Sdk Overview:     \n1- Inject & Position Custom Content    \n2- Inject CSS     \n3- Inject Position & validate your  Custom Fields     \n4- Create & View your  Custom Pages        \n5- Creates updates and deletes any type of  Menu Links  in the site          \n6-  Generates HTML  that are pre-styled in the Back Office (adminstration section)        And so much more helper functions and integrations with libraries if you wish to use",
            "title": "SDK"
        },
        {
            "location": "/#lets-get-started",
            "text": "Prerequisites:    \n1- Have an approved  account  on the developers website  \n2- Get  a free website  to serve as a development store  (make sure to use the same email address for both the developers' website account and the free store merchant's account)           Then head into the developers website and  create a new app , pick if you are creating a theme or a feature. A theme is used to provide a new design to a store and essentially manipulates the dom/css/js, a feature can also amend the dom but usually also need to make use of the API to access data of the store.            When creating an app that have an impact on the front end of the store you'll do that by injecting  Javascript/CSS  files from your app directly into the store. To achieve that, every app has a widget section that allows you to inject some  Javascript . Note that only theme apps has a section where you can add your  External CSS link  that is the link of the main/global css file for your app theme.              Whenever the app is installed on a store, this piece of Javascript is injected into the store as is. Yet this injection is not dynamic so if you need to update this piece of code your users will have to re-install your app (pending we handle app versions). For now to overcome this limitation and to also have a better code structure we advise to use this area of code to inject a loader script.                 A loader script will take care of dynamically injecting an external script that would hold your app's logic and thus allow you to update your app on the go without the need to edit the app on the developers website.            here is an example of a loader script:  (function() {\nvar sb_website_id = window.SBsdk.SBdata.SBwebsite_data.website_id;\nvar user_id = window.SBsdk.SBdata.SBwebsite_data.user_id;\nvar user_role = window.SBsdk.SBdata.SBwebsite_data.user_role;\nvar page_id = window.SBsdk.SBdata.page.id;\nvar page_type = window.SBsdk.SBdata.page.type;\nvar action = window.SBsdk.SBdata.page.action;\nvar query_strings = SBsdk.SBdata.page.query_strings\nvar script = document.createElement('script');\nscript.async = true;\n\nvar secure = window.location.protocol === 'https:';\nscript.src = (secure ? 'https' : 'http') +\"://linktoyourscript.yourdomain.com/widget.js?sb_website_id=\"+sb_website_id+\"&user_id=\"+user_id+\"&user_role=\"+JSON.stringify(user_role)+\"&page_type=\"+page_type+\"&action=\"+action+\"&page_id=\"+page_id+\"&query_strings=\"+JSON.stringify(query_strings);\n\nvar entry = document.getElementsByTagName('script')[0];\nentry.parentNode.insertBefore(script,entry);\n\nwindow.inject_custom_data_{YourAppID} = function(){\n    return { 'wait' : '{YourAppID}' };\n}\n\nwindow.inject_css_{YourAppID}  = function(){\n    return [\n        {\n            css : 'https://linktoyourcss.yourdomain.com/app.css',\n            type : 'external'\n        }\n    ]\n};\n})();  Feel free to use this script and replace the values according to your app's information (URIs of your codes and App ID).  As you can see the widget script can make use of SDK variables, functions and callbacks. Similarly to how any loaded JS is also able to make use of these.  Also note that you are responsible to host your codebase, make sure you host in a place that can provide SSL encryption (to avoid mixed content errors as all our live stores are delivered over https), also make sure the TTFB is low to provide the best user experience to merchants, some mechanism are in place in the SDK to timeout apps that would have a very high load time.  Finally to test the app on your  development store  simply head to  admin/settings/app-store  to see your app and  install it .   Once this is properly done you are ready to start coding your app.",
            "title": "Let's Get started"
        },
        {
            "location": "/sdk/introduction/",
            "text": "Get ready, set, code !\n\n\n\"Before we start make sure you have completed the \nsetup\n\"\n       \n\n\nAll the sdk \nfunctions\n and \nglobal\n are found in \nwindow.SBsdk\n           \n\n\nLet's test that together:\n      \n\nGo to your website, open your console and type     \n\n\nconsole.log(window.SBsdk);\n               \n\n\nthe \nfunctions\n are found in  \nconsole.log(window.SBsdk.SBfunctions)\n           \n\nthe \nGlobals\n are found in  \nconsole.log(window.SBsdk.SBdata)\n              \n\n\n\n\nExample\n\n\nIn your websites home page   \n\n\nconsole.log(window.SBsdk.SBdata.page); // page helps get the page's information\n       \n\nyou will recieve an object containing information of the page you are in:         \n\n\n{\n  type: \"homepage\", // type of the page (we are in home page)\n  action: \"view\",   // we are viewing the home page\n  query_strings: \"\",// no query strings\n}",
            "title": "Introduction"
        },
        {
            "location": "/sdk/introduction/#get-ready-set-code",
            "text": "\"Before we start make sure you have completed the  setup \"          All the sdk  functions  and  global  are found in  window.SBsdk              Let's test that together:        \nGo to your website, open your console and type       console.log(window.SBsdk);                  the  functions  are found in   console.log(window.SBsdk.SBfunctions)             \nthe  Globals  are found in   console.log(window.SBsdk.SBdata)                  Example  In your websites home page     console.log(window.SBsdk.SBdata.page); // page helps get the page's information         \nyou will recieve an object containing information of the page you are in:           {\n  type: \"homepage\", // type of the page (we are in home page)\n  action: \"view\",   // we are viewing the home page\n  query_strings: \"\",// no query strings\n}",
            "title": "Get ready, set, code !"
        },
        {
            "location": "/sdk/globals/",
            "text": "the \nGlobals\n are found in  \nwindow.SBsdk.SBdata\n                    \n\n\nTo see all of the globals available:        \n\n- open your shopbuilder website      \n\n- open the console and type \nconsole.log(window.SBsdk.SBdata)\n         \n\n\n\n\nPage Data\n\n\nPage data gives you information about the page you are in.     \n\nAll of the page data are found in \nwindow.SBsdk.SBdata.page\n     \n\n\n// @Code        \nconsole.log(window.SBsdk.SBdata.page);          \n\n// @Result\n{         \n  id: '', // id of product for example (if there is no id by default it will be empty)              \n  type: '', // ex. homepage\n  action: '', // ex. Add | Edit | View            \n  query_strings: '' //ex. ?a=34&b=34         \n}      \n\n\n\n\npage type common values:\n  \nwindow.SBsdk.SBdata.page.type\n             \n\n1- homepage     \n\n2- collection (for the collection page)   \n\n3- shop_builder_display (for the product page)     \n\n4- page (for basic page)      \n\n5- order (for order page)                \n\n\npage action common values:\n \nwindow.SBsdk.SBdata.page.action\n             \n\n1- view           \n\n2- edit    \n\n3- add                          \n\n\nIn some pages, you might find other extra information in the page data\n            \n\n\n { // In the home page\n   type:\"homepage\",\n   action:\"view\",\n   cart_uuid:\"..\",\n   id:\"\",\n   products_on_sale: { [[product_article_id]]: true or false}, // States what products are on sale; this variable only appears if the user added product(s) through panels ex {node-22: true} \n   query_strings:\"\"\n }\n { // In the checkout complete page\n  type: 'checkout',\n  action: 'complete',\n  order: {\n    total_amount: '',\n    currency_code: '',\n    currency_symbol: '',\n  }\n { // In the checkout page\n  type: 'checkout',\n  action: 'checkout',\n  order: {\n    total_amount: '',\n    currency_code: '',\n  }\n{ // In the order history page\n  type: 'order',\n  action: 'history view',\n  order: {\n    order_id: '',\n  },\n}\n\n\n\n\n\n\n\nWebsite Data\n\n\n\n\nWebsite Data gives information about your website \nwindow.SBsdk.SBdata.SBwebsite_data\n    \n\n\n\n\n// @Code       \nconsole.log(window.SBsdk.SBdata.SBwebsite_data);      \n// @Result \n{\n  website_id //This is gona be the website id ex.1234568789\n  user_id //id of user that is currently logged ex. 30       \n  user_role //Array of user roles ex. [\"Authenticated\", \"merchant\"]                \n  map_marker //Array of user roles ex. [\"Authenticated\", \"merchant\"]                \n}\n\n\n\n\n\n\nGoogle Map Marker information:\n\n\n\n\n\n\n1- To access the marker information being used by the theme use: \nwindow.SBsdk.SBdata.SBwebsite_data.map_marker.theme\n.                \n\n 2- To customize your marker (ie. change the default theme) \nclick here\n         \n\n 3- To access the customized marker information that was set by an app use:  \nwindow.SBsdk.SBdata.SBwebsite_data.map_marker.custom\n.           \n\n\n\n\n\n\nPage Data Events\n\n\nPage data events are information of events that are executed on page load:       \n\nfound in \nwindow.SBsdk.SBdata.page.init_event\n               \n\n\nCases where we have this page data event:     \n\n\n1- After adding a product to cart within product drawer, the page will refresh and fire this event        \n\n\n{\n    id: 'Product url alias',\n    type: 'cart',\n    action: 'new item',\n    query_strings: '\" . $query_strings_text . \"'\n}\n\n\n\n\n2- A specific case event is executed only when user login through login popup and a query string after-login-event is available       \n\n\n{\n    id: 'Value of query string after-login-event',\n    type: 'user',\n    action: 'after login',\n    query_strings: '\" . $query_strings_text . \"'\n }\n\n\n\n\n3- If shopbuilder is configured to redirect products, this event will be executed when the redirect happens:      \n\n\n{\n    id: 'Product url alias',\n    type: 'product',\n    action: 'product-redirect',\n    query_strings: '\" . $query_strings_text . \"'\n  }\n\n\n\n\n4- When trying to add an out-of-stock product to cart within product drawer: \n\n\n{\n    id: 'Product url alias',\n    type: 'cart',\n    action: 'out-of-stock',\n    query_strings: '\" . $query_strings_text . \"'\n}",
            "title": "Globals"
        },
        {
            "location": "/sdk/functions/",
            "text": "Note that:\n \n\n- The titles prefixed by \nBO\n means that the function was made specifically for the \nBack office pages\n      \n\n- The titles prefixed by \nFO\n means that the function was made specifically for the \nFront office pages\n \n\n- \nOtherwise\n the function is made to be used for \nboth\n.     \n\n\nFunctions\n are found in  \nwindow.SBsdk.SBfunctions\n              \n\n\nTo see all of the functions available:       \n\n- open your shopbuilder website     \n\n- open the console and type \nconsole.log(window.SBsdk.SBfunctions)\n       \n\n\n\n\nBO - Table Component\n\n\nSBsdk.SBfunctions.backoffice_table(options);\n \n\n\nParameters:\n        \n\nthe \noptions\n parameter has the following structure:    \n\n\noptions = {\n  prepend_to_selector: '.selector-to-prepend-to' OR '#selector-to-prepend-to',\n  wrapperClass: 'wrapper-class', \n  class: 'class-class',\n  custom_cols_length : 8,\n  checkboxes : 1, \n  image: 1,\n  custom_header: [{index: 2, value: 'title2'}, {index: 1, value: 'title1'}],\n  data: [ {\n            class: '',\n            row_id: 'this-row-1', \n            img_url: 'https://...',\n            custom_columns: [ {index: 1, value: 'index2 text', class: ''} , {index: 0, value: 'index0 text', class: ''} ] // column data added.\n          },\n          {...},\n          ..\n        ],\n  pagination: {wrapperClass:'', itemsTotal: '', itemsPerPage: '', callback: ''},\n  delete: 'delete_callback',\n  search:  {class: '', wrapperClass:'', callback: 'search_callback'},\n};\n\n\n\n\nWhere:\n \n\n-\nprepend_to_selector\n is the selector to prepend the table to \n(by default will be appeneded to the \nbody\n)\n.     \n\n-\nwrapperClass\n is the wrapper class of the table.      \n\n-\nclass\n is the class of the table.        \n\n-\ncustom_cols_length\n specify how many custom rows you wish to have other than del, checkbox and image cols.                      \n\n-\ncheckboxes\n enables checkboxes.                \n\n-\nimage\n enables usage of images.    \n\n-\ncustom_header\n add the titles in the header of your table in a specific index.   \n\n-\ndata\n is where you start filling the table content.     \n\n\n\n\nrow_id\n is the id of your row\n\n\nimg_url\n is the image url of this specific row -- image option should be enabled\n\n\ncustom_columns\n the content of your table in a specific index.     \n\n\n\n\n-\npagination\n enables the pagination functionality.      \n\n\n\n\nAdd the number of items per page \nitemsPerPage\n and the total number of results in \nitemsTotal\n.       \n\n\nIf \nitemsTotal\n <=  \nitemsPerPage\n, there will be no pagination.       \n\n\nAdd the name of your \npagination callback function\n and don't forget to \ndefine it\n.       \n\n\nThis function will be called when paginating and given a \nparameter\n of \ntable_id\n and \npage number\n.         \n\n\nIt should \nreturn wait\n so that it waits for the data to be fetched      \n\n\nWhen your data is fetched call the function \nSBsdk.SBfunctions.backoffice_table_paginate_done(table_id, newdata, number_of_page_requested);\n \n\n-- \nWhere\n   \n\n-\nnewdata\n is of the following format:   \n\n\n\n\nvar newdata = [ {\n    class: '',\n    row_id: 'this-row-1', \n    img_url: 'https://...',\n    custom_columns: [ {index: 1, value: 'index2 text', class: ''} , {index: 0, value: 'index0 text', class: ''} ] // column data added.\n  },\n  {...},\n  ..\n],\n\n\n\n\n-\ndelete\n enables the delete functionality.      \n\n\n\n\nAdd the name of your \ndelete callback function\n and don't forget to \ndefine it\n.       \n\n\nThis function will be given a \ntable_id\n and \narray of row ids\n as a \nparameter\n.   \n\n\nIt should \nreturn wait\n so that it waits for the data to be fetched        \n\n\nWhen your data is fetched call the function \nSBsdk.SBfunctions.backoffice_table_delete_done(table_id, result, pagination_total_items);\n \n\n-- \nWhere\n      \n\n-\nresult\n is of the following format:\n\nif error : \n{error : 'error-message', deleted_successfully:[row_id1, row_id2 ..], 10}\n          \n\nif success : \n{deleted_successfully:[row_id1, row_id2 ..], 10}\n\n-\npagination_total_items\n (optional) in case of pagination -- specify the new total number of records after the deletion  \n\n\n\n\n-\nsearch\n enables the search functionality.      \n\n\n\n\nAdd the name of your \nsearch callback function\n and don't forget to \ndefine it\n.       \n\n\nThis function will be given a \ntable_id\n and the search \ntext\n as a \nparameter\n.         \n\n\nIt should \nreturn wait\n so that it waits for the data to be fetched      \n\n\nWhen your data is fetched call the function \nSBsdk.SBfunctions.backoffice_table_search_done(table_id, newdata, pagination_total_items);\n \n\n-- \nWhere\n   \n\n-\npagination_total_items\n (optional) in case of pagination -- specify the new total number of records after the search\n\n-\nnewdata\n is of the following format:   \n\n\n\n\nvar newdata = [ {\n    class: '',\n    row_id: 'this-row-1', \n    img_url: 'https://...',\n    custom_columns: [ {index: 1, value: 'index2 text', class: ''} , {index: 0, value: 'index0 text', class: ''} ] // column data added.\n  },\n  {...},\n  ..\n],\n\n\n\n\nReturn:\n\nthe return of this function will be of this structure:\n\n\n{table_id : 'data-bo-table-name-{{id}}' , dom: 'html-of-the-table-generated'}\n\n\n\n\npurpose:\n     \n\n- Generates a table as the one we have in the backoffice     \n\n- Has the option to add checkboxes to select a row or to select all rows      \n\n- Has the option to delete a row or to delete multiple rows  \n\n- Has the option to add an image per row             \n\n\npreview:\n    \n\n\n    \n\n\nHelper functions:\n   \n\n\n-To get all the checked rows:\n       \n\nReturns an array of checked row ids\n\nSBsdk.SBfunctions.backoffice_table_get_checked_row_ids(table_id);\n  \n\n\nExample:\n\n\n// Step 1: define the options you need\noptions = {\n  search: {class: 'testing-class', wrapperClass:'hello', callback: 'search_me'},\n  pagination: {wrapperClass:'hello', itemsTotal: '20', itemsPerPage: '5', callback: 'paginate_to_page'},\n  wrapperClass: 'wrapper-class',\n  class: 'class-class',\n  custom_cols_length : 8,\n  checkboxes : 1,\n  image: 1,\n  delete: 'delete_callback',\n  custom_header: [{index: 2, value: 'title2'}, {index: 1, value: 'title1'}],\n  data: [  {\n            class: 'class111111',\n            row_id: 'this-row-1',\n            img_url: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS4AzTskTQPjEiS7-ZA5Vkv7Jf02JcFelXvl7hDYMwM5eBx2tszMw',\n            custom_columns: [ {index: 1, value: 'index2 text', class: 'lalalalal'} , {index: 0, value: 'index0 text'} ]\n           },\n           {\n            row_id: 'this-row-2',\n            img_url: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS4AzTskTQPjEiS7-ZA5Vkv7Jf02JcFelXvl7hDYMwM5eBx2tszMw',\n            custom_columns: [ {index: 1, value: 'index11 text'} , {index: 0, value: 'index00 text'} ]\n           },\n        ],\n};\n// Step 2: define your delete callback function\nwindow.delete_callback = function(table_id, array_of_row_ids_to_be_deleted){\n  // process your data\n  // fetch  your data\n  jQuery.ajax({\n    url: ...,\n    success: function(result){\n      - Call the function to end the wait and to notify that the result came back\n      SBsdk.SBfunctions.backoffice_table_search_done(table_info.table_id, {deleted_successfully:['row_id1', 'row_id2']});\n    }\n  });\nreturn 'wait';\n\n}\n\n\n// Step 3: define your pagination callback function.\nwindow.paginate_to_page = function(table_id, pg_nb){\n  console.log(table_id, pg_nb);\n  // process your data\n  // fetch  your data\n  jQuery.ajax({\n    url: ...,\n    success: function(result){\n      // 1- process the result\n      // 2- Call the function to end the wait and to notify that the result came back\n      SBsdk.SBfunctions.backoffice_table_paginate_done(table_info.table_id, result, pg_nb);\n    }\n  });\n  return 'wait';\n}\n\n\n// Step 4: create your table that will be inserted in the page.\n\nvar table_info = SBsdk.SBfunctions.backoffice_table(options);\n\n// Step 5: define your search callback function\nwindow.search_me = function(table_id, text){\n  // process your data\n  // fetch  your data\n  jQuery.ajax({\n    url: ...,\n    success: function(result){\n      // 1- process the result\n      // 2- Call the function to end the wait and to notify that the result came back\n      SBsdk.SBfunctions.backoffice_table_search_done(table_info.table_id, result);\n    }\n  });\n  return 'wait';\n};\n\nconsole.log(table_info.table_id); // returns table_id; something like `data-bo-table-name-{{id}}`\nconsole.log(table_info.dom); // returns the table html that was prepended to the dom.\n\nSBsdk.SBfunctions.backoffice_table_get_checked_row_ids(table_info.table_id);  // returns an array of the checked row_ids\n\n\n\n\nNote:\n if you are not injecting your table on page load (ex. case of ajax) then call the \nrefresh function\n afterwards.\n\n\n\n\n\n\nBO - Top Action Button\n\n\nGenerates a top action button in the \nback office\n pages.   \n\n\nwindow.SBsdk.SBfunctions.add_top_action_button(options);\n      \n\nThe parameter options has the following structure:              \n\n\noptions = {\n  class: 'class',  // class of the btn\n  id: 'idddsss', // id of the btn\n  name: 'naaameeee', // name of the btn\n  Title: 'Titleeee' // title of the btn\n} \n\n\n\n\n\n\n\n\nFO - Throbber / Loader\n\n\nto add a throbber to the page.  \n\ncall \nSBsdk.SBfunctions.loader(action, time_in_ms);\n               \n\n\nNote:\n \n\n1- \nSBsdk.SBfunctions.loader()\n // add a throbber to the page    \n\n2- \nSBsdk.SBfunctions.loader('remove')\n // removes a throbber from the page       \n\n3- \nSBsdk.SBfunctions.loader('remove', 100)\n // removes a throbber from the page after 100 ms                \n\n4- the throbber is in the following markup: \n<div class=\"ajax-progress ajax-progress-throbber sdk-throbber\"></div>\n (Given for styling purposes)                 \n\n\nNote:\n   \n\n\n// @Code\n// Consider the following senario\n\n//**app1 calls:**         \nSBsdk.SBfunctions.loader();\n\n//**app2 calls:**         \nSBsdk.SBfunctions.loader();\nSBsdk.SBfunctions.loader('remove');\n\n// @Result\n// In this case the Throbber/Loader Will not be removed from the page\n// Unless all apps that registered the throbber calls the `remove` action.\n// Thus, to remove the throbber app1 has to call `SBsdk.SBfunctions.loader('remove');`     \n\n\n\n\n\n\nFO - Apply Special Select Effect On Existing Selects\n\n\nTo transform existing select found in the website to a \nspecial select\n use the function of \nwindow.SBsdk.SBfunctions.sbsdk_select_style (selector, options)\n;   \n\n\nwhere\n:                   \n\n\nSelector\n is your select field selector ex: \n#selector\n or \n.selector\n     \n\nand \noptions\n: \n(optional)\n               \n\n\n\n\noptions = {\n       \n\n\ndropdownCssClass: 'class',\n // class that is added for the dropdown   \n\n\naddAsterisk: defaultValueOfSelectField,\n // adding astericks for the default value   \n\n\nsearchable: {placeholder: 'hello'},\n // adding a search field with an optional placeholder        \n\n\n}\n              \n\n\n\n\nNote 1: If you want to call this library for a select \nafter ajax call\n this function in \npage_event_{{appd}}\n             \n\n\nNote 2: If you want to generate a special select, check \nhere\n.\n          \n\n\nExample:\n   \n\n\nwindow.SBsdk.SBfunctions.sbsdk_select_style('select#edit-field-gender-und',\n{\n  dropdownCssClass: 'hello-dropdown-css-class',\n  addAsterisk:  '_none',\n  searchable: {placeholder: 'hello'}\n});\n\n\n\n\n\n\n\nFO - Get Resource - Rendered Raw HTML\n\n\nIn general \nget resource\n is a way to get the html with its functionality as it is in the shopbuilder platform.      \n\n\nUsage\n:     \n\n\nwindow.SBsdk.SBfunctions.get_resource(resource_type, resource_data, function (result) {\n  // returns the html of the needed resouce and functionality in (result) var\n});\n\n\n\n\nAvailable Resources\n:         \n\n~~~~~~~~~~~~~~~~~~       \n\n\n-\nview_product\n      \n\n\n-This resouce gets the \nproduct view html\n with its functionality. You can place this HTML where you want, for you have full control of it.                            \n\n-Product node ID is used in the request. {base_url}/sb/product_view/{prodId}        \n\n\nUsage:\n               \n\n\nwindow.SBsdk.SBfunctions.get_resource('view_product', {'id': prodId}, function (result) {\n  // The html of the product and functionality are all in (result) var\n});\n\n\n\n\n\n\nCreate Custom Page\n\n\nA)\n \nTo create a \nfront office\n page use the url of \n/app_page/\n:\n          \n\n\n/app_page/{name of page}/{query string 1}/{query string 2}/\n\n\nSteps:\n   \n\n\n1-  \ninject a new menu title \nOr\n Update a menu title url\n; This \nmenu title\n should have the \nurl\n of your new page \n/   app_page/{name of your page}/\n                        \n\n\n2- now to get your page information check \nwindow.SBsdk.SBdata.page\n      \n\n- you will find the name of your page in \nwindow.SBsdk.SBdata.page.id\n      \n\n- you will find the querystrings of your page in \nwindow.SBsdk.SBdata.page.query_strings\n     \n\n- you can know the type of your page using \nwindow.SBsdk.SBdata.page.type\n in this case it will be \ncustom-front\n    \n\n\n3-  use the pages info (window.SBsdk.SBdata.page) to inject your data and enjoy      \n\n\nB)\n \nTo create a \nback office\n page use the url of \n/admin/app_page/\n:\n          \n\n\n/admin/app_page/{name of page}/{query string 1}/{query string 2}/\n\n\nSteps:\n   \n\n\n1-  \ninject a new menu title \nOr\n Update a menu title url\n; This \nmenu title\n should have the \nurl\n of your new page \n/admin/app_page/{name of your page}/\n                        \n\n\n2- now to get your page information check \nwindow.SBsdk.SBdata.page\n      \n\n- you will find the name of your page in \nwindow.SBsdk.SBdata.page.id\n      \n\n- you will find the querystrings of your page in \nwindow.SBsdk.SBdata.page.query_strings\n     \n\n- you can know the type of your page using \nwindow.SBsdk.SBdata.page.type\n in this case it will be \ncustom-front\n    \n\n\n3-  use the pages info (window.SBsdk.SBdata.page) to inject your data and enjoy   \n\n\n\n\nRefresh\n\n\nThe refresh function attaches all the libraries again on the selectors if not attached before.\n\n\nincase of \najax\n or \ninserting dom\n using \ndom generation\n functions      \n\nif there are some libraries not being initialized on elements      \n\ncall the refresh function:         \n\n\nwindow.SBsdk.SBfunctions.refresh();\n   \n\n\n\n\nMenu Titles\n\n\nA) Delete Existing Menu links:\n             \n\n\nTo delete menu links use the function of \nwindow.SBsdk.SBfunctions.delete_menu_links (menuLinksData);\n         \n\nThe \nparameter\n \nmenuLinksData\n is of the following structure:   \n\n\n//Structure of the Parameter that should be given\n menuLinksData = [\n    {\n      menu_type: 'menu_type',\n      menu_urls: ['/menu-url1', 'menu_title2']\n    },\n    {\n      menu_type: 'menu_type',\n      menu_urls: ['/menu-url1', 'menu_title2']\n    },\n ];\n\n\n\n\nWhere:  \n\n\nmenu_urls\n: should be an array of all the urls of the menu links to be deleted.             \n\n\nmenu_type\n:  is a string that specifies in which menu do you want to add the menu link.  \n\n\nmenu_type\n can have the following values:               \n\n- \nmenu\n : the front office main menu       \n\n- \nmenu_secondary\n the front office secondary menu      \n\n- \nfooter\n the front office footer        \n\n- \nfooter_secondary\n the front office secondary footer          \n\n- \nnavigation_menu\n the back office navbar menu            \n\n\nExample:\n\n\nvar menuLinksData = [\n    // deleting the (about us) and (home) menu title from the (main menu) and (footer)\n    {\n       menu_type: 'menu',\n       menu_urls: ['/', '/aboutus']\n    },\n    {\n       menu_type: 'footer',\n       menu_urls: ['/', '/aboutus']\n    },\n];\nwindow.SBsdk.SBfunctions.delete_menu_links(menuLinksData);\n\n\n\n\nB) Update Menu links:\n             \n\n\nTo update menu links use the function of \nwindow.SBsdk.SBfunctions.update_menu_links (menuLinksData);\n        \n\nThe parameter \nmenuLinksData\n is of the following structure:   \n\n\n//Structure of the Parameter that should be given**    \nvar  menuLinksData = [\n  {\n   menu_type: 'menu_type',\n   data: [\n     {\n      menu_link:        {menu_title: 'menu_title1' ,  menu_url: '/menu-url1' }, // old menu\n      update_menu_link: {menu_title: 'menu_title1_new' ,  menu_url: '/menu-url1_new' }, // new menu\n     },\n     {\n      menu_link:        {menu_title: 'menu_title1' ,  menu_url: '/menu-url1' }, // old menu\n      update_menu_link: {menu_title: 'menu_title1_new' ,  menu_url: '/menu-url1_new' }, // new menu\n     }\n   ]\n  },\n  {\n   menu_type: 'menu_type2',\n   data: [\n     {\n      menu_link:        {menu_title: 'menu_title1' ,  menu_url: '/menu-url1' },\n      update_menu_link: {menu_title: 'menu_title1_new' ,  menu_url: '/menu-url1_new' },\n     }\n   ]\n  }, ...\n];\n\n\n\n\nWhere:      \n\n\nmenu_title\n : is the title of the menu link.         \n\n\nmenu_url\n : is the url of the menu link.         \n\n\nmenu_link\n : old menu links data\n\nupdate_menu_link\n : new menu links data      \n\n\nmenu_type\n is a string that specifies in which menu do you want to add the menu link.     \n\n\nmenu_type\n can have the following values:              \n\n- \nmenu\n : the front office main menu \n\n- \nmenu_secondary\n the front office secondary menu \n\n- \nfooter\n the front office footer \n\n- \nfooter_secondary\n the front office secondary footer  \n\n- \nnavigation_menu\n the back office navbar menu    \n\n\n//Example:\nvar  menuLinksData = [\n  {\n    // in main menu\n    menu_type: 'menu',\n    data: [\n      {  // update contact us menu title and url\n       menu_link:        {menu_title: 'Contact Us' ,  menu_url: '/contact' },\n       update_menu_link: {menu_title: 'Contact Me' ,  menu_url: '/contact-me' },\n      },\n      { // update collections menu title\n       menu_link:        {menu_title: 'Collections ' ,  menu_url: '/collection/Collections' },\n       update_menu_link: {menu_title: 'My Collection' ,  menu_url: '/collection/Collections' },\n      }\n    ]\n  },\n  {\n    // in footer menu\n    menu_type: 'footer',\n    data: [\n      { // update the contact us menu title\n       menu_link:        {menu_title: 'Contact Us' ,  menu_url: '/contact' },\n       update_menu_link: {menu_title: 'Contact meeee' ,  menu_url: '/contact' },\n      }\n    ]\n  }, ...\n];\nwindow.SBsdk.SBfunctions.update_menu_links(menuLinksData);\n\n\n\n\nC) Add Menu links:\n             \n\n\nTo add menu links use the function of \nwindow.SBsdk.SBfunctions.inject_menu_links (menuLinksData);\n           \n\nThe parameter \nmenuLinksData\n is of the following structure:      \n\n\n//Structure of the Parameter that should be given    \nmenuLinksData = [          \n  {             \n    menu_type: 'menu_type',           \n    data: [          \n      {menu_title: 'menu_title1' ,  menu_url: '/menu-url1', id:\"id1\", order: '1', class:'class1 class2' },      \n      {menu_title: 'menu_title2' ,  menu_url: '/menu-url2', id:\"id2\", order: '1', class:'class1 class2' ,       \n         sub_menu: [        \n           {menu_title: 'menu_sub_title' ,  menu_url: '/menu-sub-url' }    \n         ]        \n       }       \n    ]       \n  },        \n  {        \n    menu_type: 'menu_type',       \n    data: [        \n      {menu_title: 'menu_title' ,  menu_url: '/menu-url', id:\"id3\", order: '1', class:'class1 class2' }      \n     ]         \n  },         \n];        \n\n\n\n\nWhere:     \n\n\norder\n starts from value 0 it is where you want to position the your menu link       \n\n\nmenu_title\n : is the title of the menu link.         \n\n\nmenu_url\n : is the url of the menu link.         \n\n\nsub_menu\n : is an array of the menu links.      \n\n\nmenu_type\n: is a string that specifies in which menu do you want to add the menu link.       \n\n\nmenu_type\n can have the following values:             \n\n- \nmenu\n : the front office main menu                    \n\n- \nmenu_secondary\n the front office secondary menu          \n\n- \nfooter\n the front office footer             \n\n- \nfooter_secondary\n the front office secondary footer            \n\n- \nnavigation_menu\n the back office navbar menu               \n\n\nExample:\n\n\nvar menuLinksData = [\n  {\n     menu_type: 'menu',\n     data: [\n       {menu_title: 'menu_title1' ,  menu_url: '/menu-url1', id:\"id1\", order: '1', class:'class1 class2'  },\n       {menu_title: 'menu_title2' ,  menu_url: '/menu-url2', id:\"id2\", order: '1', class:'class1 class2', \n          sub_menu: [\n            {menu_title: 'menu_sub_title' ,  menu_url: '/menu-sub-url' }\n          ]\n        }\n     ]\n  },\n  {\n     menu_type: 'footer',\n     data: [\n       {menu_title: 'menu_title' ,  menu_url: '/menu-url', id:\"id3\" , order: '1', class:'class1 class2' }\n      ]\n  },\n];\nwindow.SBsdk.SBfunctions.inject_menu_links (menuLinksData);\n\n\n\n\n\n\nUser Forms\n\n\nUser forms are the login, register and forget password forms.           \n\n\nSBsdk.SBfunctions.SBsdk_user_forms(action, type);\n                    \n\nwhere the parameter:     \n\n\naction\n can be:                           \n\n1- 'login' \n(opens the login form)\n       \n\n2- 'register' \n(opens the register form)\n                 \n\n3- 'forget-password' \n(opens the forget password form)\n           \n\n\ntype\n (optional):    \n\n1- 'page' \ndefault value\n \n(redirects to the \naction\n page)\n    \n\n2- 'popup' \n(opens a popup with the \naction\n form)\n              \n\n\ngive it \n'popup'\n to open the \naction\n popup         \n\n\n\n\nExample: \nLet's try it out together:  \n\nopen the console of your shopbuilder website and type.        \n\n\nSBsdk.SBfunctions.SBsdk_user_forms('login', 'popup');\n          \n\nthis will open the register  popup          \n\n\n\n\n\n\nMaintain Data From Logged-out To Logged-in Page\n\n\nThis is how to get your data after a successful login:     \n\n\nStep 1:\n    \n\ncall \nSBsdk.SBfunctions.notify_after_popup_login(str data)\n;     \n\nwhile you are logged out with the data you want to maintain (send your data as a string)              \n\n\nStep 2:\n        \n\nuse the \nlogin popup\n of the sdk to login..                \n\n\nStep3:\n     \n\nafter logging in you will be able to get/access your data in \nSBsdk.SBdata.page.init_event\n where:                \n\n\nSBsdk.SBdata.page.init_event = {\n  id: 'YOUR DATA',\n  type: 'user',\n  action: 'after login',\n  query_strings: '?after-login-event=YOUR DATA'\n}\n\n\n\n\n\n\nValidating User Uoken\n\n\nTo verify the user token  \ncall :\n \nwindow.SBsdk.SBfunctions.verify_user_token(appID, user_token);\n   \n\n\n\n\nDialog\n\n\nA)\n To get a dialog:           \n\n\ncall \nSBsdk.SBfunctions.dialog(content, options);\n              \n\n\nThe parameters:   \n\n- \ncontent\n is a string with the dom needed inside this dialog  \n\n- \noptions\n is a an object \n(Optional)\n                 \n\n\noptions\n can have the following values:    \n\n\noptions = {\n  wrapperClass: 'wrapper-class',\n  Title: (Str) 'title',\n  SaveBtn: (Str) 'save-btn-name',\n  buttons: ['button1name','button2name'],\n  lockDialog: 1\n}                 \n//------------------OR------------------        \noptions = {\n  wrapperClass: 'wrapper-class',\n  Title: {name: 'title-name', class: 'title-class'},\n  SaveBtn: {name: 'save-btn-name', class: 'save-btn-name'},\n  buttons: [\n    {name:'btn1name', class:'btn1class'},{name:'btn2name', class:'btn2class'}\n  ],\n  lockDialog: 1\n}\n\n\n\n\nWhere:       \n\n- \nSaveBtn\n is a save button for the dialog     \n\n- \nButtons\n are some extra action buttons added in the dialog   \n\n- \nTitle\n is the title of the dialog   \n\n- \nwrapperClass\n is a class added to the wrapper of the dialog   \n\n- \nlockDialog\n is a way to prevent the dialog from closing even if another dialog was opened     \n\n\nExample:\n          \n\n\n// Adding dialog A\nSBsdk.SBfunctions.dialog('<div class=\"dialog-A\">Dom content here</div>',{\n  Title: \"Title\",\n  \"SaveBtn\" : 'save'\n}); \n// Adding dialog B (closes dialog A and adds dialog B that is locked)\nwindow.SBsdk.SBfunctions.dialog('<div  class=\"dialog-B\">heyyy<div>', {\n  lockDialog:1,\n  Title: 'hello Title',\n  SaveBtn: 'save me',\n  buttons: [\n    {name:'hello', class: 'helloClass'},\n    {name:'hey', class: 'heyClass'}\n  ]\n});       \n// Adding dialog C (keeps the locked dialog B and adds dialog C above it)\nwindow.SBsdk.SBfunctions.dialog('<div class=\"dialog-C\">heyyy<div>', {\n  Title: 'hello Title',\n  SaveBtn: 'save me',\n  buttons: ['hello', 'hello2']\n});                      \n\n\n\n\nB)\n To hook or get notified after the dialog has been opened go to \ndialog event\n section    \n\n\nC)\n Dialog Actions\n\n\nTo manage the the dialog use the function        \n\n\nSBsdk.SBfunctions.dialog_actions(dialog_wrapperClass, action);\n          \n\n\nThe parameters:  \n\n- \naction\n is by default set to \nremove\n                      \n\n\nExample:\n    \n\n\n// To close a specific dialog whether locked or not              \nSBsdk.SBfunctions.dialog_actions(dialog_wrapperClass);        \n\n// To close all dialogs from page..          \nSBsdk.SBfunctions.dialog_actions();               \n\n// To close all dialogs but not the locked dialogs          \nSBsdk.SBfunctions.dialog_actions('.sbsdkDialog:not(.dialog-locked)');         \n\n\n\n\n\n\nCarousel\n\n\nA)\n carousel:        \n\ncall the function: \n\n\nwindow.SBsdk.SBfunctions.carousel (wrapper_selector, options)\n;       \n\n\nThe parameters:      \n\n-\nwrapper_selector\n is the wrapper of the list items  \n\n-\noptions:\n\n\n// The values given for the options below are the default values\noptions = {\n  dots: false,\n  speed: 300,\n  slidesToShow: 1,\n  slidesToScroll: 1,\n  variableWidth: false,\n  centerMode: false,\n  adaptiveHeight: false,\n  prevArrow: '', //html of prev elt\n  nextArrow: '' //html of next elt\n}\n\n\n\n\nB)\n initialize a carousel special for magnific popups:       \n\n\nwindow.SBsdk.SBfunctions.magnific_popup_carousel (wrapperSelector, options)\n;            \n\n\n-\nwrapperSelector\n  is the selector of magnific popup wrapper ex \nwrapperSelector = '.field-name-field-image-product  .mfp-gallery-image'\n       \n\n-\noptions:\n\n\n// The values given for the options below are the default values\noptions = { \n  dots: false,\n  speed: 300, \n  slidesToShow: 1, \n  slidesToScroll: 1, \n  variableWidth: false, \n  centerMode: false, \n  adaptiveHeight: false, \n  prevArrow: html of prev elt, \n  nextArrow: html of next elt\n}\n\n\n\n\nExample:\n          \n\n\nvar carousel_options = {\n    slidesToShow: 4,\n    slidesToScroll: 4,\n    nextArrow: '<i class=\"fa fa-arrow-right\"></i>',\n    prevArrow: '<i class=\"fa fa-arrow-left\"></i>',\n  };\n  window.SBsdk.SBfunctions.magnific_popup_carousel('.field-name-field-image-product  .mfp-gallery-image', carousel_options);\n\n\n\n\n\n\nParallax\n\n\ncall the function: \n\n\nwindow.SBsdk.SBfunctions.parallax (wrapper_selector, options)\n;       \n\n\nThe parameters:      \n\n-\nwrapper_selector\n is the wrapper of the section where you should give it your \nbg image\n that will make the parallax effect in css       \n\n-\noptions:\n \n\n\n1- \noption\n \nname\n: \nimageSrc\n \nREQUIRED\n       \n\n\noption\n \ntype\n: \npath\n       \n\n\noption\n \ndescription\n: You must provide a path to the image you wish to apply to the parallax effect.        \n\n\n2- \noption\n \nname\n: \nspeed\n        \n\n\noption\n \ntype\n: \nfloat\n       \n\n\noption\n \ndescription\n: The speed at which the parallax effect runs. 0.0 means the image will appear fixed in place, and 1.0 the image will flow at the same speed as the page content. \ndefault value (0.2)\n.        \n\n\n3- \noption\n \nname\n: \nbleed\n        \n\n\noption\n \ntype\n: \nnumber\n       \n\n\noption\n \ndescription\n: You can optionally set the parallax mirror element to extend a few pixels above and below the mirrored element. This can hide slow or stuttering scroll events in certain browsers. \ndefault value (0)\n.        \n\n\nExample:\n          \n\n\nvar wrapper_selector = '.wrapper-bg-parallax-image'; // or jQuery('.wrapper-bg-parallax-image')\nvar options = {\n  'imageSrc': 'https://aaa/b/image.png',\n  'speed' : 0.1\n};\nwindow.SBsdk.SBfunctions.parallax(wrapper_selector, options);\n\n\n\n\n\n\nColor Picker\n\n\ncall the function: \n\n\nwindow.SBsdk.SBfunctions.color_picker(input_selector, options)\n;       \n\n\nThe parameters:      \n\n-\ninput_selector\n is the text input field where the picker will set the hex code of the color chosen    \n\n-\noptions:\n\n\n// The values given for the options below are the default values\noptions = {\n  color: \"#f00\", // default value of the color input field\n  allowEmpty:true, // if the input field is allowed to be empty\n  showAlpha: true, // allows alpha transparency selection\n  disabled: true, //  to disable the color picker or not\n  clickoutFiresChange: true, //clicking outside of color picker would trigger the change if set to true\n  chooseText: \"Alright\", // change the okay btn text of the color picker\n  cancelText: \"No way\", // change the cancel btn text of the color picker\n  showButtons: false, // removes the buttons of color picker and triggers a change on the clickout of the picker\n  containerClassName: 'awesome', // add an additional class name to the container of the color picker popup\n  replacerClassName: 'awesome', // add an additional class name to the color picker\n}\n\n\n\n\nExample:\n          \n\n\nvar options = {\n  allowEmpty: true\n}\n  window.SBsdk.SBfunctions.magnific_popup_carousel('input.color-picker', options);\n\n\n\n\nPreview\n:         \n\n\nbefore initialize function: \n        \n\n\nafter initialize function: \n           \n\n\nif opened the color picker: \n          \n\n\n\n\nDrag Ability\n\n\ncall the function: \n\n\nwindow.SBsdk.SBfunctions.dragula(id_selector, options)\n;       \n\n\nThe parameters:      \n\n-\nid_selector\n is the id of the wrapper of elements to be dragged ex. suppose \n<div id=\"wrapper\"><span>1</span><span>2</span></div>\n then \nid_selector = wrapper\n                        \n\n-\noptions:\n (optional)                 \n\n\noptions = {\n  direction: \"\", // could be \"vertical\" or \"horizontal\"\n  moves: \"\", // className of what should move the draggable item\n}\n\n\n\n\nExample:\n                    \n\n\n//  Suppose we have the following structure:\n//  <table>\n//  <tbody id=\"table-body\">\n//  <tr>  <span class=\"handle-class\">drag to move me</span>  <span class=\"row-data\"> ... </span>  </tr>\n//  <tr>  <span class=\"handle-class\">drag to move me</span>  <span class=\"row-data\"> ... </span>  </tr>\n//  ...\n//  </tbody>\n//  </table>\n\nvar id_selector = 'table-body';\nvar options = {\n  direction: 'vertical', // i want to move the rows vertically\n  moves: 'handle-class' // i want to be able to drag the rows through the handle \n}\nwindow.SBsdk.SBfunctions.dragula(id_selector, options);\n\n\n\n\n\n\nMessages\n\n\nlist all the functions that can be used to print a message \nwindow.SBsdk.SBfunctions.SBmessages\n      \n\n\nconsole.log (window.SBsdk.SBfunctions.SBmessages);      \n\n\n\n\nTo set a message simply call \nwindow.SBsdk.SBfunctions.SBmessages.set_message(msg, type, options);\n       \n\n\nparameters\n:   \n\n-\nmsg\n is a String         \n\n-\ntype\n is a String -- \npossible values\n: success, warning, error          \n\n-\noptions\n  -- (Optional)                 \n\n\noptions = {        \n  positionInWrapperId: 'the-id-of-wrapper-you-want-to-append-this-to',       \n  className : 'give-custom-class-name-for-the-alert-div',       \n  scrollToError : 1 (Only for type error)      \n}                \n\n\n\n\nExamples\n: \n\n\n    window.SBsdk.SBfunctions.SBmessages.set_message('hello there error', 'error');\n    window.SBsdk.SBfunctions.SBmessages.set_message('hello there success', 'success');\n    window.SBsdk.SBfunctions.SBmessages.set_message('hello there warning', 'warning');\n    window.SBsdk.SBfunctions.SBmessages.set_message('hello there warning in navbar position', 'warning', {\n      positionInWrapperId :'navbar'\n    });     \n    window.SBsdk.SBfunctions.SBmessages.set_message('error', 'error', {className: 'sdk-errors'});\n\n\n\n\nPreview\n:      \n\n\n      \n\n\n\n\nDom Generation & Management\n\n\nTo generate dom use: \nwindow.SBsdk.SBfunctions.SBmessages.generateDom(type, options);\n         \n\n\nFor all this function details click \nhere",
            "title": "Functions"
        },
        {
            "location": "/sdk/events/",
            "text": "SDK Ready\n\n\nOnce the SDK has finished performing all operations the custom \nsBsdkReady\n event is triggered and can be listened to with the following code\n\n\njQuery(document).on(\"sBsdkReady\",function(e) {\n   // Your code here\n});\n\n\n\n\nDialog\n\n\nTo hook or get notified after the \ndialog\n has been opened                     \n\n\njQuery(document).on(\"sBsdkDialogReady\",function(e) {});\n                     \n\n\nExample:\n       \n\n\nSBsdk.SBfunctions.dialog('<div class=\"dialog-A\">Dom content here</div>',{\n  Title: \"Title\",\n  \"SaveBtn\" : 'save'\n});\n// calling the dialog will fire the sBsdkDialogReady Event\njQuery(document).on(\"sBsdkDialogReady\",function(e) {\n  // do something\n});",
            "title": "Events"
        },
        {
            "location": "/sdk/callbacks/",
            "text": "Dom Injection\n\n\nTo insert Dom implement:             \n\n\nfunction inject_custom_data_{{appId}}(){}\n       \n\n\nparameters\n : no parameters provided             \n\n\nReturn\n (obj)       \n\n\n-\nReturn\n should be of the following structure:             \n\n\ncase 1)\n I can generate my dom and returned it directly.      \n\n\nret = {\n  'data' : [\n    {'id': id1, 'dom': dom1}, // descriptive unique id should be given for the dom you want to inject\n    {'id': id2, 'dom': dom2},\n    {'id': id3, 'dom': dom3}\n  ],\n  // if you have injected fields (custom text fields etc etc) that you need to validate upon submission of the page\n  // give the html id of the form with the corresponding validation function name. \n  'submitHandler': {'formId1': 'submitHandler1', 'formId2': 'submitHandler2'}\n};\n\n\n\n\ncase 2)\n I dont have the dom yet, still waiting for it; The DOM is being generated from another (scope) js code \nasyncrounously\n.    \n\n\nret = { 'wait' : {{appId}} }\n\n\n\n\nFOR THEME APPS (better performance - speed)\n        \n\nuse this function instead \nfunction theme_inject_custom_data_{{appId}}(){}\n       \n\n\nparameters\n : no parameters provided             \n\n\nReturn\n (obj)       \n\n\n-\nReturn\n should be of the following structure:             \n\n\ncase 1)\n I can generate my dom and returned it directly.      \n\n\nret = {\n  'data' : [\n    {'id': id1, 'dom': dom1}, // descriptive unique id should be given for the dom you want to inject\n    {'id': id2, 'dom': dom2},\n    {'id': id3, 'dom': dom3}\n  ]\n};\n\n\n\n\ncase 2)\n I dont have the dom yet, still waiting for it; The DOM is being generated from another (scope) js code \nasyncrounously\n.    \n\n\nret = { 'wait' : {{appId}} }\n\n\n\n\n~~~~~  ~~~~~~  ~~~~~  ~~~~~~  ~~~~~  ~~~~~~  ~~~~~  ~~~~~~\n\n\nFor case 1:\n Inject your dom and define your submit handler:  \nExample:\n       \n\n\n\nwindow.submissionCallbackExample = function (){\n // validate your custom data before submission \n // If your validation suceeds or fails\n // YOUR SUBMIT HANDLER SHOULD RETURN\n // TRUE OR FALSE respectively\n\n  return true; // validation success\n};\n\nwindow.inject_custom_data_456 = function(){\n\n  var dom = window.SBsdk.SBfunctions.generateDom('textfield', {\n    class: 'textfield-dummy-class',\n    wrapperClass: 'textfield-wrapper-dummy-class',\n    Title: 'Title',\n    required: 1,\n    placeholder: 'placeholder',\n    id: 'i-am-an-id',\n    name: 'hello',\n    size: 60,\n    maxlength: 255,\n    value: 'default value'\n  });\n\n  id = 'validate-test';\n\n  ret = {\n    'data' : [{'id': id, 'dom': dom}], \n     // dom will be appended after body by default unless positioned\n    'submitHandler': {'form-id': 'submissionCallbackExample'}\n     // (optional) you can skip this if you have no form\n  };\n\n  return ret;\n};\n\n\n\n\nFor case 2:\n      \n\n- Return wait \n(to wait for the dom to arrive)\n       \n\n- call \nwindow.SBsdk.SBfunctions.injectCustomDataCallback(appId, returnCallback);\n once you have the dom needed; with the \nappId\n and the \nreturncallback\n.   \n\n-the return callback should be of the following structure as well:   \n\n\nret = {\n  'data' : [\n    {'id': id1, 'dom': dom1}, // descriptive unique id should be given for the dom you want to inject\n    {'id': id2, 'dom': dom2},\n    {'id': id3, 'dom': dom3}\n  ],\n  // if you have injected fields (custom text fields etc etc) that you need to validate upon submission of the page\n  // give the html id of the form with the corresponding validation function name. \n  'submitHandler': {'formId1': 'submitHandler1', 'formId2': 'submitHandler2'}\n};\n\n\n\n\nExample for case 2:\n       \n\n\n// if for Some reason you don't need to return the data at this level\n// and you want to provide the data from another scope asynchronously:\n\n//Step1:\n\n  window.submissionCallbackExample = function(){\n    // validate your custom data before submission \n    // If your validation suceeds or fails\n    // YOUR SUBMIT HANDLER SHOULD RETURN\n    // TRUE OR FALSE respectively\n    return true;\n  }\n\n  window.inject_custom_data_123 = function(){\n    // you return wait with the {{appId}}\n    // to tell the hook to wait for the dom of this function\n    return { 'wait' : '123' };\n  }\n\n// Now to populate data of appId 123 in some other scope or function:\n// All that you have to do is call: window.SBsdk.SBfunctions.injectCustomDataCallback\n// Ex.\n\n//Step2:\n// prepare the data in this structure:\n  jQuery.ajax(\n    url: url,\n    type: GET,\n    success: function(data){\n      var returnOf123Callback = {\n       'data' : [{'id': '123Id-1', 'dom': '<h1>'+data+'</h1>'}, {'id': '123Id-2', 'dom': '<h1>dom2</h1>'}],\n        'submitHandler': 'submissionCallbackExample', // (optional)\n      };\n      // call this function giving it the appId and the Dom data\n      window.SBsdk.SBfunctions.injectCustomDataCallback(123, returnOf123Callback);\n    }\n  );\n\n\n\n\n\n\nForm Submission Callback\n\n\nIf what is needed is to validate a form \nwithout\n the use of inject_custom_data_{{appId}}:                   \n\n1-   \n\ncall: \ninjectCustomFormCallbacks(form_callbacks);\n      \n\nwhere the \nform_callbacks\n is of the structure:    \n\n\nform_callbacks = {'formId1': 'submitHandler1', 'formId2': 'submitHandler2'}\n     \n\n\n2-      \n\ndefine your callback functions  \nfunction submitHandler1()\n & \nfunction submitHandler2()\n   \n\n\nThis callback function should \nreturn true\n or \nreturn false\n       \n\nOR should \nreturn 'wait'\n in case the result is returned asynchronously like ajax result for example..     \n\n3-        \n\nafter getting the needed result         \n\ncall \nerrorsWaitedToValidateCallback(appId, result);\n where the \nresult should be either true or false\n      \n\n\nExample:\n \n\n\n//Example of an ajax form\nfunction callback_hello(){\n  alert('HELLOOOO');\n}\n// page ajax events\nwindow.page_events_4705647385 = function(data){\n   if($('form[action=\"/ajax_register/login/ajax\"]').length){\n       id = $('form[action=\"/ajax_register/login/ajax\"]').attr('id');\n       obj = {};\n       obj[id] = 'callback_hello';\n       window.SBsdk.SBfunctions.injectCustomFormCallbacks(obj);\n   }\n}\n\n\n\n\n\n\nDom Position\n\n\nTo position DOM implement:              \n\n\nfunction inject_position_data_{{appId}}(appId, appId_dom_data){}\n         \n\n\nparameters\n :                 \n\n-\nappId\n will contain the app id                     \n\n-\nappId_dom_data\n will contain all the Dom data for this specific app (coming from dom inject) to be able to position them                          \n\n\nReturn\n \nan array of the elements that have been positioned\n            \n\n\nExamples\n:                       \n\n\n// Step1 inject the data.\n  window.inject_custom_data_568 = function(){\n    // populate the dom\n    dom1 = '<h1>DOMM 1</h1>';\n    dom2 = '<h1>DOMM body</h1>';\n    dom3 = '<h1>DOMM 2</h1>';\n    // specify a descriptive id for each dom\n    id1 = 'collectionDom'; // will be positioned in inject_position_data_568\n    id2 = 'bodyyy';        // will not be positioned in inject_position_data_568  \n                           // and so will be appeneded to the body\n    id3 = 'productDom';    // will be positioned in inject_position_data_568\n\n    ret = {\n      'data' : [{'id': id1, 'dom': dom1}, {'id': id2, 'dom': dom2}, {'id': id3, 'dom': dom3}],\n      'submitHandler': 'submissionCallbackExample', // optional in case wanted to handle submission\n    };\n\n    return ret;\n  };\n\n// Step2 To position the previously populated dom .. we only need to know the id of each dom\n\n  window.inject_position_data_568 = function(appId, appId_dom_data){\n\n\n    var title = document.createElement('div');\n    title.className = 'collectionDom';\n     // Step:1) GET THE DOM: appId_dom_data[ID]\n    title.innerHTML = appId_dom_data['collectionDom'];\n     // Step:2) insert it where wanted\n    document.getElementById('block-system-main').appendChild(title);\n\n    var title2 = document.createElement('div');\n    title2.className = 'productDom';\n    title2.innerHTML = appId_dom_data['productDom'];\n    document.getElementById('block-system-main').appendChild(title2);\n\n     // Step:3) return an array of keys of the positioned ids\n    return ['collectionDom', 'productDom'];\n  };\n\n\n\n\n\nFOR THEME APPS (better performance - speed)\n  \n\n\nfunction theme_inject_position_data_{{app_id}}(appId, appId_dom_data){}\n    \n\n// same as \nfunction inject_position_data_{{appId}}(appId, appId_dom_data){}\n\n\n\n\nInject CSS\n\n\nTo inject custom css implement:              \n\n\nfunction inject_css_{{appId}}(){}\n           \n\n\nparameters\n : no parameters provided        \n\n\nReturn\n:  \nyou can return inline or external css\n   \n\n\nLook at the example to see how to achieve this. \n\n\nExamples\n: \n\n\n  window.inject_css_123 = function(){\n    return [\n      {\n        css : 'body{ background-color: darkgray; }',\n        type : 'inline'\n        // adds a style tag to the head with the css written\n      },\n      {\n        css : '{{path-to-your-css}}/test789.css',\n        type : 'external'\n        // adds a link tag stylesheet with href *test789.css* to the head\n      }, ...\n    ]\n  };\n\n\n\n\n\n\n\nPage Ajax Events\n\n\nRespond to page ajax events.    \n\n\nA)\n To act upon page ajax events implement:          \n\n\nfunction page_events_{{appId}}(data){}\n    \n\n\nReturn\n \nNo return\n // if not asyncronous\n\nParameter:\n \n\n- \ndata\n an array containing information about the ajax that has occured       \n\n\ndata\n you might get should look something like this:\n\n\n'id' => '',\n'type' => 'user',\n'action' => 'signup',\n'query_strings' => $query_strings_text,\n'wrapper_id' => 'modalContent',\n'wrapper_class' =>\n\n\n\n\nLook at the example to see how to achieve this. \n\n\nExamples\n: \n\n\n  window.page_events_111 = function(data){\n    // Act on data.\n  };\n\n\n\n\n\nB)\n To wait for asyncronous calls:   \n\nin the implementation of function: \nfunction page_events_{{appId}}(){}\n simply \nreturn 'wait';\n \n\n\nthis will keep on waiting for function \npageEventWaitedCallback(appId);\n that you need to call later on to stop the waiting\n\n\nExample\n\n\n  var know_result = '';\n  window.page_events_111 = function(data){\n    jQuery.ajax({\n      url: url,\n      type: GET,\n      success: function(e){\n        know_result = true;\n        // end the waiting process\n        window.SBsdk.SBfunctions.pageEventWaitedCallback(111);\n      },\n      error: function(e){\n        know_result = false;\n        // end the waiting process\n        window.SBsdk.SBfunctions.pageEventWaitedCallback(111);\n      }\n    });\n    // In this example\n    // after a page event happened, wait for the response of ajax to set the variable\n    return 'wait';\n  };\n\n\n\n\nC)\n Events executed after ajax requests:    \n\n\nin your implementation of the \nfunction page_events_{{app_id}}(data){}\n               \n\n\nin the parameter\n \ndata\n                  \n\nyou can get information after an ajax about the following events:                                  \n\n\n-After changing the product varaition within add-to-cart form (For example at product view page or product drawer)           \n\n\n {\n    'id' => $node->uuid,\n    'type' =>  'product',\n    'action' => 'product-variation-change',\n    'query_strings' => $query_strings_text,\n    'wrapper_id' => 'node-' . $node->nid,\n    'wrapper_class' => '',\n  },\n\n\n\n\n-After updating cart form, for example changing number of purchased products would trigger this event. (Cart form usually found in a block)\n\n\n {\n    'id' => '',\n    'type' => 'cart',\n    'action' => 'update',\n  }\n\n\n\n\n-After pressing quick-edit in orders listing page\n\n\n{\n    'id' => $order->uuid,\n    'type' =>  'order',\n    'action' => 'quick-edit',\n    'query_strings' => $query_strings_text,\n    'wrapper_id' => '',\n    'wrapper_class' => 'views-megarow-content-' . $order_id,\n  }\n\n\n\n\n-When any ajax request has been fired within checkout page \n\n\n  {\n    'id' => $order->uuid,\n    'type' =>  'checkout',\n    'action' => 'ajax-complete',\n    'query_strings' => $query_strings_text,\n    'order' => array(\n      'total_amount' =>  '',\n      'currency_code' => '',\n      'currency_symbol' => '',\n    )\n  }\n\n\n\n\n-When user login/forgot-password/signup forms has been opened in a popup'\n\n\n{\n    'id' => '',\n    'type' => 'user',\n    'action' => 'login || password|| signup',\n    'query_strings' => $query_strings_text,\n    'wrapper_id' => 'modalContent',\n    'wrapper_class' => '',\n  }\n\n\n\n\n-After creating or updating an address profile'\n\n\n  {\n    'id' => $profile->uuid,\n    'type' => 'shipping-customer-address || billing-customer-address',\n    'action' => 'new || updated',\n    'query_strings' => $query_strings_text\n  }\n\n\n\n\n-When opening add/edit profile forms or when deleting an address profile\n\n\n {\n    'id' => isset($profile->profile_id) ? $profile->uuid : '',\n    'type' =>  'shipping-customer-address || billing-customer-address',\n    'action' => 'open edit || open add || delete',\n    'query_strings' => $query_strings_text\n  }\n\n\n\n\n-Panels page events    \n\n\na) Event triggered after the ajax of Design my page button.\n\n\n{       \n  'id' => 'panels_ipe_edit_control_form',\n  'type' =>  'panels',\n  'action' => 'start-design'\n}\n\n\n\n\n\nb) Event triggered after saving the designed page\n\n\n{\n  'id' => 'panels_ipe_edit_control_form',\n  'type' =>  'panels',\n  'action' => 'save-design',\n}\n\n\n\n\n\nc) Event triggered after updating or adding a box of a panel pane\n\n\n{\n  'id' => 'panels_ipe_edit_control_form',\n  'type' =>  'panels',\n  'action' => 'save-design',\n}\n\n\n\n\n\nd) Event triggered after saving the style of a panel pane          \n\n\n{\n  'id' => '{{form_id}}',\n  'type' =>  'panels-pane',\n  'action' => 'styles-save-pane',\n}\n\n\n\n\n\n\nGoogle Map Marker Callback\n\n\n\n\nTo alter the icon of the google marker, use \ntheme_app_map_marker_{{appId}}\n.                     \n\n\nThis callback function should be defined as soon as your js file loads. Thus you have to define it globally.\n\n\nYou can always access the google map data. \nclick here for more information\n\n\n\n\n// in your js file \n// as you can notice in the definition of this function.. it is not wrapped inside any function (it is defined globally).\nwindow.theme_app_map_marker_{{appId}} = function(){\n  options = {\n    image_url : '', // absolute url (REQUIRED)\n    scale: { \n      width: 50, // default value if was not set\n      height: 50 // default value if was not set\n    }, // (Optional)\n    origin:{\n      width: 0, // default value if was not set\n      height: 0 // default value if was not set\n    }, // (Optional)\n    anchor:{\n      width: 0, // default value if was not set\n      height: 0 // default value if was not set\n    }, // (Optional)\n  }\n  return options;\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", function(event) {\n ... \n});\n\n\n\n\nExample:\n \n\n\n// suppose the app id of my theme is 123123123, then\n\nwindow.theme_app_map_marke_123123123 = function(){\n  options = {\n    image_url : 'https://openclipart.org/image/2400px/svg_to_png/192591/map-marker.png',\n  }\n  return options; \n};\n// then you will be able to see the image marker that you have set with image of dimension 50x50",
            "title": "Callbacks"
        },
        {
            "location": "/sdk/dom-generation/",
            "text": "Note that:\n \n\n- The titles prefixed by \nBO\n means that the type was made specifically for the \nBack office pages\n          \n\n- \nOtherwise\n the function is made to be used for \nboth\n.    \n\n\nFor Dom Generation you have the following function.\n\n\nwindow.SBsdk.SBfunctions.SBmessages.generateDom(type, options);\n         \n\n\nThe parameters:      \n\n-\ntype\n is a String    \n\n-\noptions\n is an obj   \n\n\n\n\nBO - TITLES\n\n\nPreview: (SECTION TITLE)\n        \n\n  ~~~~~~~~~~~~~~~~~~~~                \n\n\n         \n\n\nParameters: (SECTION TITLE):\n  \n\n  ~~~~~~~~~~~~~~~~~~~~ \n\n\ntype = 'section_title';\noptions = {\n  Title: 'Title',\n};\n\n\n\n\nPreview: (SECTION SUBTITLE) :\n           \n\n  ~~~~~~~~~~~~~~~~~~~~~~~~~                \n\n\n          \n\n\nParameters: (SECTION SUBTITLE)\n  \n\n  ~~~~~~~~~~~~~~~~~~~~~~~ \n\n\ntype = 'section_subtitle';\noptions = {\n  Title: 'Title',\n};\n\n\n\n\n\n\nBO - STICKY ACTION BUTTONS\n\n\nPreview:\n \n\n  ~~~~~~   \n\n\n\n\nParameters:\n  \n\n  ~~~~~~~~~~~~ \n\n\ntype = 'sticky_action_buttons';\n\noptions = [\n  {type: '', class: '', id: '', Title: ''},\n  ...\n];\n\n\n\n\nwhere:\n    \n\n- \ntype\n can be \nbtn\n, \ndel-btn\n or \ncancel\n              \n\n- \nnotes:\n    \n\n--  type \ncancel\n is a \nlink\n by default it will have \nCANCEL title\n.             \n\n--  type \ndel-btn\n by default will have \nDelete title\n. It doesnt have an id option, the first delete button added will have a delete widget to confirm deletion.\n\n\nExample:\n \n\n\nwindow.SBsdk.SBfunctions.generateDom('sticky_action_buttons', [\n  {type: 'btn', class: 'class-1', id: 'id-1', Title: 'save-1'},\n  {type: 'btn', class: 'class-2', id: 'id-2', Title: 'save-2'},\n  {type: 'del-btn', class: 'class-del-1'}, // titles for del btns are optional   |||   no ids for del\n  {type: 'del-btn', class: 'class-del-1'}, // titles for del btns are optional   |||   no ids for del\n  {type: 'cancel', class: 'class-link-1' , id: 'idddd', Title: 'ssss'} // titles for cancels are optional\n]);\n\n\n\n\n\n\nBO - RADIO\n\n\nPreview:\n \n\n  ~~~~~~   \n\n\n\n\nParameters:\n  \n\n  ~~~~~~~~~~~~ \n\n\ntype = 'radio';\n\noptions = {\n  wrapperClass: 'wrapperClass', //(REQUIRED)\n  name: 'common-for-all-radios', //(REQUIRED)\n  disabled: 1,\n  data: [\n    {\"Title\":'', \"class\":'', \"id\": '', \"value\": '', \"checked\" : 1},\n    {\"Title\", \"class\", \"id\", \"value\"}\n  ]\n};\n\n\n\n\nHelper Functions:\n\n  ~~~~~~~~~~~~ \n\n\n- Radios actions: (ie. radio that is generated using generateDom):\n\n\nSBsdk.SBfunctions.radio_action(inputSelector_wrapperSelector, action);\n       \n\nwhere:  \n\n- \naction\n can be \nreset, disable, enable or check\n      \n\n- for the actions \nreset, disable, enable\n the inputSelector_wrapperSelector should be the wrapperClass of the radios          \n\n- for the action \ncheck\n the inputSelector_wrapperSelector should be the radio input        \n\n\nnote that when radios are disabled you can not check radios\n              \n\n\nExample:\n                       \n\n\nSBsdk.SBfunctions.radio_action('.shopbuilder-radio', 'reset');\nSBsdk.SBfunctions.radio_action('.shopbuilder-radio', 'disable');\nSBsdk.SBfunctions.radio_action('.shopbuilder-radio', 'enable');\nSBsdk.SBfunctions.radio_action('.shopbuilder-radio input:last', 'check');\n\n\n\n\n\n\nBO - CHECKBOX\n\n\nPreview:\n   \n\n  ~~~~~~ \n\n\n\n\nParameters:\n  \n\n  ~~~~~~~~~~~~ \n\n\ntype = 'checkbox';\n\noptions = {\n  wrapperClass: 'wrapperClass',\n  toggle: 1, // to transform it into a switch checkbox\n  data: [\n    {\"Title\":'', \"class\":'', \"id\":'',  \"name\":'', \"value\":'', \"checked\":1, \"disabled\":1},\n    {\"Title\":'', \"class\":'', \"id\":'',  \"name\":'', \"value\":'', \"checked\":1, \"disabled\":1}\n  ]\n};\n\n\n\n\nHelper Functions:\n\n  ~~~~~~~~~~~~ \n\n\n- Checkbox actions: (ie. checkbox that is generated using generateDom):\n  \n\n\nSBsdk.SBfunctions.checkbox_action(inputSelector, action);\n                    \n\n\nWhere:\n        \n\n- \ninputSelector\n: ex \"input.input-selector\" OR \"input#input-selector\"                \n\n- \naction\n: enable, disable, check, uncheck               \n\n\nExample:\n               \n\n\nSBsdk.SBfunctions.checkbox_action('.input-selector', 'uncheck');        \nSBsdk.SBfunctions.checkbox_action('.input-selector', 'check');        \nSBsdk.SBfunctions.checkbox_action('.input-selector', 'disable');        \nSBsdk.SBfunctions.checkbox_action('.input-selector', 'enable');        \n\n\n\n\n\n\nBO - IMAGE WIDGET\n\n\nPreview:\n   \n\n   ~~~~~~~\n\n\n\nParameters:\n  \n\n  ~~~~~~~~~~~~ \n\n\ntype = 'image_upload';\n\noptions = {\n  Title: 'Title',\n  TitleClass: 'TitleClass',\n  wrapperId: 'wrapperId',\n  multiple : 1,\n  inputFileData:{ max, id, name, size, class }, // the input of type file data\n  deleteFileData:{name, id, class}, // the delete btn data\n  uploadFileData:{ name, id, class}, // the upload btn data\n  values : [{..},{..}]\n  // check example to see how to populate this;\n  //note that it can be an array of objs (multple image upload) or an array (single image)\n};\n\n\n\n\nHelper Events:\n     \n\n  ~~~~~~~~~~~~ \n\n\n- \nimage_uploader\n EVENT:\n     \n\nThis event is used to allow 3rd party apps to respond to the uploaded file\n\n\n$(document).on(\"image_uploader\",function(event) {\n  // you will find the following data\n  console.log(event.input_file_selector); // the input dom reference of the file input.\n  console.log(event.image_correct_base64);  // returns the correct orientation of image using its exif data.\n  console.log(event.fileObj); // the file object.\n});\n\n\n\n\n\n\nBO - MINI TABLE IMAGE UPLOADER\n\n\nPreview:\n         \n\n   ~~~~~~~ \n\n\n   \n\n\n\n\nParameters:\n  \n\n  ~~~~~~~~~~~~ \n\n\ntype = 'mini_multi_image_uploader';\n\noptions = {\"wrapperId\": 'id', \"wrapperClass\": 'class', // class and id of the main container of the widget\n saveSpaceForImages : 1, // option to be able to collapse images or else they will be uploaded one after the other\n inputFileData:{class: 'input-class', id :'input-id', size: '' }, // the class id and size for the input of type file\n values : [ // if there are already images that have been uploaded and wanted to display them on page load \n    { \n      wrapperClass: '', // wrapper class of the image\n      viewImgData:{ width, height, src, alt, fid, class}, // data of the image\n      deleteFileData:{class} // class of the delete button\n    }, // 1st image\n    { \n      wrapperClass: '', // wrapper class of the image\n      viewImgData:{ width, height, src, alt, fid, class}, // data of the image\n      deleteFileData:{class} // class of the delete button\n    }, // 2nd image\n    { \n      wrapperClass: '', // wrapper class of the image\n      viewImgData:{ width, height, src, alt, fid, class}, // data of the image\n      deleteFileData:{class} // class of the delete button\n    }, // 3rd image\n    ...\n  ],\n};\n\n\n\n\n\nHelper Events:\n     \n\n  ~~~~~~~~~~~~ \n\n\n- \nmini_image_uploader\n EVENT:\n     \n\nThis event is used to allow 3rd party apps to respond to the uploaded file\n\n\n$(document).on(\"mini_image_uploader\",function(event) {\n  // you will find the following data\n  console.log(event.action); // upload\n  console.log(event.error);  // the error message - incase upload is of an unallowed extension\n  console.log(event.success); // incase of success of the upload ie. {'filename': filename.extension, 'file': base64Url, wrapperSelector: wrapperOfImage}\n});\n\n\n\n\nHelper Functions:\n\n  ~~~~~~~~~~~~ \n\n\n- Mini uploader actions:\n  \n\n\nSBsdk.SBfunctions.mini_multi_image_uploader_actions(wrapperSelector, action, data);\n                    \n\n\nParameters:\n  \n\n- \naction\n can be \nadd_image\n or \ndel_image\n         \n\n- \nwrapperSelector\n: if \naction = add_image\n then \nwrapperSelector\n is the \nmain wrapper of the whole image widget\n else if \naction = del_image\n then it is the \nwrapper of the image being deleted\n       \n\n- \ndata\n: if \naction = add_image\n then data is the data of the images to be added\n\n\ndata : [\n  { \n    wrapperClass: '', // wrapper class of the image\n    viewImgData:{ width, height, src, alt, fid, class}, // data of the image\n    deleteFileData:{class} // class of the delete button\n  }, // 1st image\n  { \n    wrapperClass: '', // wrapper class of the image\n    viewImgData:{ width, height, src, alt, fid, class}, // data of the image\n    deleteFileData:{class} // class of the delete button\n  }, // 2nd image\n  { \n    wrapperClass: '', // wrapper class of the image\n    viewImgData:{ width, height, src, alt, fid, class}, // data of the image\n    deleteFileData:{class} // class of the delete button\n  }, // 3rd image\n  ...\n]  \n\n\n\n\nelse if \naction = del_image\n then data can be \n'success'\n or \n'fail'\n to be able to remove the image being deleted or remove the throbber effect on it             \n\n\nExample:\n               \n\n\n// step1 add the image widget to the dom.\noutput = window.SBsdk.SBfunctions.generateDom('mini_multi_image_uploader', options);\n$('body').append(output);\n// if it doesnt work out of the box .. you should refresh the sdk libraries or use them in the sdk callbacks\n// step2 refresh\nSBsdk.SBfunctions.refresh();\n// step3 act on upload to save your file\n$(document).on(\"mini_image_uploader\",function(event) {\n  // you will find the following data\n  console.log(event.action); // upload\n  console.log(event.error);  // the error message - incase upload is of an unallowed extension\n  console.log(event.success); // incase of success of the upload ie. {'filename': filename.extension, 'file': base64Url, wrapperSelector: wrapperOfImage}\n  if(event.action == 'upload'){\n    if(typeof event.error !== 'undefined'){\n      // do something incase of error (maybe display the message)\n      alert(event.error);\n    }\n    if(typeof event.success !== 'undefined'){\n      // save the file in your files in case of success\n      //you will have\n      // file name being uploaded event.success.filename\n      // file base64url event.success.file\n      // referance of the wrapper of the whole image widget event.success.wrapperSelector\n      if(you_have_saved_it_successfully(event.success)){\n        // APPEND YOUR IMG\n        new_img_data = [\n          { \n            wrapperClass: 'new-img',\n            viewImgData:{src: img_src},\n            deleteFileData:{class: 'delete-btn-class'} // class of the delete button\n          }\n        ]  \n        window.SBsdk.SBfunctions.mini_multi_image_uploader_actions( event.success.wrapperSelector, 'add_image', new_img_data);\n      }\n    }\n  }\n});\n// step4 act on delete to del your file\n$(document).on('click', \".delete-btn-class\",function(event) {\n  // DELETE YOUR IMAGE \n\n  // if failed\n  //window.SBsdk.SBfunctions.mini_multi_image_uploader_actions($(this).closest('.image-wrapper'), 'del_image', 'fail');\n\n  // if success\n  window.SBsdk.SBfunctions.mini_multi_image_uploader_actions($(this).closest('.image-wrapper'), 'del_image', 'success');\n\n});\n\n\n\n\n\n\n\nTEXTFIELD\n\n\nParameters:\n\n  ~~~~~~~~~~~~ \n\n\ntype = 'textfield';\noptions = {\n  wrapperClass: 'wrapper-class',\n  type: 'password' or 'date' or 'search'(\"search\" is BO specifc - to take the design of a search field), // if type is text dont put type option\n  class: 'class',\n  name: 'name',\n  value: 'value',\n  Title: 'title',\n  required: '1', // (don't use if not required)\n  placeholder: '',\n  id: '',\n  size: '',\n  maxleng: ''\n};\n\n\n\n\n\nHelper Functions:\n\n  ~~~~~~~~~~~~ \n\n\n- The textfield type is date:\n\n\nThe following function will help you get or set the value in the date picker\n\n\nfunction SBsdk.SBfunctions.date_actions(selector, action, value)\n        \n\n\n\n\nSelector\n ex \nSelector = '#inputSelector'\n || \nSelector = '#inputSelector'\n         \n\n\naction\n can be 'set' || 'get'           \n\n\nvalue\n use in case of \naction = 'set'\n ex. \nvalue= '12/13/2018'\n    \n\n\n\n\nExample:\n                     \n\n\njQuery('body').append(window.SBsdk.SBfunctions.generateDom('textfield', {\n      wrapperClass: 'wrapper-date',\n      Title: 'Title',\n      type: 'date',\n      id: 'datee',\n      name: 'date',\n      maxlength: 255,\n})\n);\nSBsdk.SBfunctions.refresh();\nSBsdk.SBfunctions.date_actions('#datee', 'set', '5/30/1994');\nconsole.log(SBsdk.SBfunctions.date_actions('#datee', 'get'));\n\n\n\n\n\n\nSELECT\n\n\nPreview:\n    \n\n ~~~~~~\n\n\n-single select:    \n\n\n       \n\n\n-multiple select:        \n\n\n              \n\n\nParameters:\n  \n\n  ~~~~~~~~~~~~ \n\n\ntype = 'select';\noptions = {\n  wrapperClass: 'wrapper-class',\n  class: 'class',\n  name: 'name', // required for a multi select\n  Title: 'title',\n  required: '1', // (don't use if not required)\n  id: '',\n  multiple: 1, // multiple select (don't use if not multiple)\n  options: [{value: '', selected: 1, label: '', class:''}, ..],\n};\n\n\n\n\n\n\nSPECIAL SELECT\n\n\nPreview:\n \n\n ~~~~~~~\n\n\n-single select:    \n\n\n  \n\n\n-multi select:    \n\n\n  \n\n\nParameters:\n     \n\n  ~~~~~~~~~~~~ \n\n\ntype = 'select';\noptions = {\n  wrapperClass: 'wrapper-class',\n  class: 'class',\n  name: 'name', // required for a multi select\n  Title: 'title',\n  required: '1', // (don't use if not required)\n  id: '',\n  multiple: 1, // multiple select (don't use if not multiple)\n  options: [{value: '', selected: 1, label: '', class:''}, ..],\n\n  select2: {\n    dropdownCssClass: 'dropdownClass', // adds a class for the select dropdown\n    addAsterisk: defaultValueOfSelectField, // adds a '*' for the default value text \n    searchable: { // adds a search for the select\n      placeholder: 'hello' // the place holder text of the search\n    }\n  } \n};\n\n\n\n\nHelper Functions:\n\n  ~~~~~~~~~~~~ \n\n\n1- Get and set the special select:\n         \n\nYou can simply get and set any special select using jQuery as any normal select tag:  \n\n\nExample:\n   \n\n\n// GET\n// where the .class is the class applied on the special-select SELECT tag.\njQuery('.class').val();\n\n// SET\njQuery('.class').val('option1');\n// to apply the set change simple trigger change\njQuery('.class').trigger('change');\n\n\n\n\n2- Append and Remove new elements to any special select:\n           \n\n\nSBsdk.SBfunctions.select2_action(select_selector, action, array_of_options)\n    \n\n\naction\n parameter can be \nappend\n or \nreset\n  \n\n\nwhere:\n    \n\n- \nappend\n appends on existing options              \n\n- \nreset\n removes old options and adds new options            \n\n\nExample:\n\n\n// normal options \noptions = [\n{class:'aa', value: 'abcd' , label: 'ra', imageSelect2: 'img-src.png',customHtml: ''},\n{class:'bb', value: 'abcdabcd', selected: 1, label: 'ma', imageSelect2: 'img-src.png',customHtml: 'editme'},\n{class:'cc', value: 'abcdabcdabcd', selected: 1, label: 'fa', imageSelect2: 'img-src.png',customHtml: 'editme'},\n];\n// parm(0) is the select_selector (\"class\") ex. \".selector_select\"\n// parm(1) is the action which is append..\n// parm(2) is the new options wanted to be appended..\nSBsdk.SBfunctions.select2_action('.selector_select', 'append', options);\n\n\n\n\n\n\nSPECIAL SELECT IMAGE WIDGET\n\n\nPreview:\n \n\n  ~~~~~~~    \n\n\n\n\nParameters:\n  \n\n  ~~~~~~~~~~~~ \n\n\ntype = 'select';\noptions = {\n  wrapperClass: 'wrapper-class',\n  class: 'class',\n  name: 'name', // required for a multi select\n  Title: 'title',\n  required: '1', // (don't use if not required)\n  id: '',\n  multiple: 1, // multiple select (don't use if not multiple)\n  options: [\n    {\n      value: '',\n      selected: 1,\n      label: '',\n      class:'',\n\n      imageSelect2: 'url', // the image url\n      customHtml: \"html\"  // some html that is added beside the option Label\n    },\n    ..\n  ],\n\n  select2: {\n    dropdownCssClass: 'dropdownClass', // adds a class for the select dropdown\n    addAsterisk: defaultValueOfSelectField, // adds a '*' for the default value text \n    searchable: { // adds a search for the select\n      placeholder: 'hello' // the place holder text of the search\n    },\n\n    image: 1\n  }\n};\n\n\n\n\nHelper Functions:\n\n  ~~~~~~~~~~~~ \n\n\nSame helper functions of \nspecial select\n       \n\n\n\n\nSPECIAL SELECT WIDGET\n\n\nPreview:\n   \n\n ~~~~~~~\n\n\n\n\nParameters:\n  \n\n  ~~~~~~~~~~~~ \n\n\ntype = 'select';\noptions = {\n  wrapperClass: 'wrapper-class',\n  class: 'class',\n  name: 'name', // required for a multi select\n  Title: 'title',\n  required: '1', // (don't use if not required)\n  id: '',\n  multiple: 1, // multiple select (don't use if not multiple)\n  options: [\n    {\n      value: '',\n      selected: 1,\n      label: '',\n      class:'',\n\n      imageSelect2: 'url', // the image url\n      customHtml: \"html\"  // some html that is added beside the option Label\n    },\n    ..\n  ],\n\n  select2: {\n    dropdownCssClass: 'dropdownClass', // adds a class for the select dropdown\n    image: 1\n  },\n\n  widget: { emptyText: 'no more results found', addButtonClass:'class-to-the-add-btn'} \n};\n\n\n\n\nHelper Functions:\n\n  ~~~~~~~~~~~~ \n\n\nSame helper functions of \nspecial select\n \n\n\n\n\nUPLOAD\n\n\nParameters:\n  \n\n  ~~~~~~~~~~~~ \n\n\ntype = 'upload';\noptions = {\n  wrapperClass: 'wrapper-class',\n  class: 'class',\n  name: 'name',\n  value: '',\n  Title: 'title',\n  required: '1', // (don't use if not required)\n  id: '',\n  size: ''\n};\n\n\n\n\n\n\nTEXTAREA\n\n\nParameters:\n  \n\n  ~~~~~~~~~~~~ \n\n\ntype = 'textarea';\noptions = {\n  wrapperClass: 'wrapper-class',\n  class: 'class',\n  name: 'name',\n  value: '',\n  Title: 'title',\n  required: '1', // (don't use if not required)\n  id: '',\n  rows:'',\n  cols:'',\n  placeholder:'',\n  maxlength:''\n};\n\n\n\n\n\n\nWYSIWYG TEXT EDITOR\n\n\nPreview:\n   \n\n  ~~~~~~\n\n\n\nParameters:\n  \n\n  ~~~~~~~~~~~~ \n\n\ntype = 'wysiwyg';\noptions = {\n  wrapperClass: 'wrapper-class-of-wysiwyg',\n  class: 'class', //(REQUIRED)\n  Title: 'title',\n  required: '1', // (don't use if not required)\n  value: '', //(string contains markup --can be html)\n};\n\n\n\n\nHelper Functions:\n\n  ~~~~~~~~~~~~ \n\n\n1- Get or Set the wysiwyg data:\n      \n\n\nvar get_data = SBsdk.SBfunctions.wysiwyg_data(class_of_wysiwyg);\n // gets the data    \n\n\nSBsdk.SBfunctions.wysiwyg_data(class_of_wysiwyg, 'set', HTML_data);\n // set data       \n\n\nExample\n          \n\n\nSBsdk.SBfunctions.wysiwyg_data('.pop-up', 'set', '<p>hello</p>'); // sets the html inside the wysiwyg           \nvar get_data = SBsdk.SBfunctions.wysiwyg_data('.pop-up'); // returns the html inside the wysiwyg that is <p>hello</p>         \n\n\n\n\n2- Configure your wysiwyg:\n    \n\n\n\n\nTo change the configuration of all of your wysiwyg use the function:     \n\n\nwindow.SBsdk.SBfunctions.wysiwyg_configuration(config);\n        \n\n\n\n\nA) by default you will have the configuration used in Shopbuilder platform that is               \n\n\nconfig.toolbar = [[\"Bold\", \"Italic\", \"Underline\", \"JustifyLeft\", \"JustifyCenter\", \"JustifyRight\", \"JustifyBlock\", \"BidiLtr\", \"BidiRtl\", \"BulletedList\", \"NumberedList\", \"Outdent\", \"Indent\", \"Undo\", \"Redo\", \"Link\", \"Unlink\", \"Anchor\", \"base64image\", \"Cut\", \"Copy\", \"Paste\", \"PasteText\", \"PasteFromWord\", \"RemoveFormat\", \"Format\", \"FontSize\", \"video_filter\"]];\n\n\n\n\nTo get the SB config simply use:           \n\n\nconfig = '';\n       \n\n\nwindow.SBsdk.SBfunctions.wysiwyg_configuration(config);\n  \n\n\nEx. Let's try it out together .. copy the following code into the console and voil\u00e0.         \n\n\nconfig = ''; // gets the configurations of sb\n// set the configuration\nwindow.SBsdk.SBfunctions.wysiwyg_configuration(config);\n// then insert your wysiwyg\ndom = window.SBsdk.SBfunctions.generateDom('wysiwyg', {\"wrapperClass\": 'hello', \"class\": 'class-editor' , \"Title\": 'title',\"required\":1, \"value\": '<h2>Hello</h2><p>world!</p>'});\njQuery('body').append(dom);\nSBsdk.SBfunctions.refresh();\n\n\n\n\n\nB) To get ALL of the supported items in a wysiwyg\n       \n\n\nconfig = {};\n       \n\n\nwindow.SBsdk.SBfunctions.wysiwyg_configuration(config);\n               \n\n\nSET   \n\n\nconfig = {};\n \n\nThat is equivalent to:\n\n\n      config= {};\n      // Toolbar configuration generated automatically by the editor based on config.toolbarGroups.\n      config.toolbar = [\n        { name: 'document', groups: [ 'mode', 'document', 'doctools' ], items: [ 'Source', '-', 'Save', 'NewPage', 'Preview', 'Print', '-', 'Templates' ] },\n        { name: 'clipboard', groups: [ 'clipboard', 'undo' ], items: [ 'Cut', 'Copy', 'Paste', 'PasteText', 'PasteFromWord', '-', 'Undo', 'Redo' ] },\n        { name: 'editing', groups: [ 'find', 'selection', 'spellchecker' ], items: [ 'Find', 'Replace', '-', 'SelectAll', '-', 'Scayt' ] },\n        { name: 'forms', items: [ 'Form', 'Checkbox', 'Radio', 'TextField', 'Textarea', 'Select', 'Button', 'ImageButton', 'HiddenField' ] },\n        '/',\n        { name: 'basicstyles', groups: [ 'basicstyles', 'cleanup' ], items: [ 'Bold', 'Italic', 'Underline', 'Strike', 'Subscript', 'Superscript', '-', 'CopyFormatting', 'RemoveFormat' ] },\n        { name: 'paragraph', groups: [ 'list', 'indent', 'blocks', 'align', 'bidi' ], items: [ 'NumberedList', 'BulletedList', '-', 'Outdent', 'Indent', '-', 'Blockquote', 'CreateDiv', '-', 'JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock', '-', 'BidiLtr', 'BidiRtl', 'Language' ] },\n        { name: 'links', items: [ 'Link', 'Unlink', 'Anchor' ] },\n        { name: 'insert', items: [ 'Image', 'base64image', 'Flash', 'Table', 'HorizontalRule', 'Smiley', 'SpecialChar', 'PageBreak', 'Iframe' ] },\n        '/',\n        { name: 'styles', items: [ 'Styles', 'Format', 'Font', 'FontSize' ] },\n        { name: 'colors', items: [ 'TextColor', 'BGColor' ] },\n        { name: 'tools', items: [ 'Maximize', 'ShowBlocks' ] },\n        { name: 'others', items: [ '-' ] },\n        { name: 'about', items: [ 'About' ] }\n      ];\n      // Toolbar groups configuration.\n      config.toolbarGroups = [\n        { name: 'document', groups: [ 'mode', 'document', 'doctools' ] },\n        { name: 'clipboard', groups: [ 'clipboard', 'undo' ] },\n        { name: 'editing', groups: [ 'find', 'selection', 'spellchecker' ] },\n        { name: 'forms' },\n        '/',\n        { name: 'basicstyles', groups: [ 'basicstyles', 'cleanup' ] },\n        { name: 'paragraph', groups: [ 'list', 'indent', 'blocks', 'align', 'bidi' ] },\n        { name: 'links' },\n        { name: 'insert' },\n        '/',\n        { name: 'styles' },\n        { name: 'colors' },\n        { name: 'tools' },\n        { name: 'others' },\n        { name: 'about' }\n      ];\n\n\n\n\nnote that to use an image plugin you can use either: \nbase64image\n or \nImage\n           \n\n\nC) you can customize your configuration to get the desired wysiwyg\n     \n\n\n\n\nchoose the items from the Supported items of the wysiwyg mentioned above in part (B)\n\n\n\n\nExample\n:\n\n\n// It should be the first function to execute before any wysiwyg injection        \nconfig= {};          \nconfig.toolbar = [[ 'Cut', 'Copy', 'Paste', 'PasteText', 'PasteFromWord', '-', 'Undo', 'Redo' ]];                  \nwindow.SBsdk.SBfunctions.wysiwyg_configuration(config);             \n\n// then insert your wysiwyg\ndom = window.SBsdk.SBfunctions.generateDom('wysiwyg', {\"wrapperClass\": 'hello', \"class\": 'class-editor' , \"Title\": 'title',\"required\":1, \"value\": '<h2>Hello</h2><p>world!</p>'});\njQuery('body').append(dom);\nSBsdk.SBfunctions.refresh();       \n\n\n\n\n\n\nTo add a seperator between an item and another we use  '-':\n\n\n\n\nExample\n: Try it out with us\n\n\n// It should be the first function to execute before any wysiwyg injection        \nconfig= {};           \nconfig.toolbar = [[ 'Cut', 'Copy', '-', 'Undo', 'Redo' ]];                  \nwindow.SBsdk.SBfunctions.wysiwyg_configuration(config);             \n\n// then insert your wysiwyg\ndom = window.SBsdk.SBfunctions.generateDom('wysiwyg', {\"wrapperClass\": 'hello', \"class\": 'class-editor' , \"Title\": 'title',\"required\":1, \"value\": '<h2>Hello</h2><p>world!</p>'});\njQuery('body').append(dom);\nSBsdk.SBfunctions.refresh();       \n\n\n\n\n\n\nto group your items and devide them on lines: note that '/' will make add your items on a new line\n\n\n\n\nExample:\n Try it out\n\n\nconfig= {};\n\n// create your groups\n\nconfig.toolbarGroups = [\n  { name: 'clipboard'},   // a clipboard group\n  '/',                    // new line\n  { name: 'basicstyles'}, // basicstyles group\n  { name: 'paragraph'}  // paragraph group\n];\n\n// add the items of each group\nconfig.toolbar = [\n  { name: 'clipboard', items: [ 'Cut', 'Copy', 'Paste', 'PasteText', 'PasteFromWord', '-', 'Undo', 'Redo' ] }, // for clipboard group the following items.\n  '/',  // new line\n  { name: 'basicstyles', items: [ 'Bold', 'Italic', 'Underline', 'Strike', 'Subscript', 'Superscript', '-', 'CopyFormatting', 'RemoveFormat' ] }, // for the basic styles\n  { name: 'paragraph', groups: [ 'list', 'indent', 'blocks', 'align', 'bidi' ], items: [ 'NumberedList', 'BulletedList', '-', 'Outdent', 'Indent', '-', 'JustifyLeft', 'JustifyCenter', 'JustifyRight'] } // for the paragraph\n];\n\nwindow.SBsdk.SBfunctions.wysiwyg_configuration(config);             \n\n// then insert your wysiwyg\ndom = window.SBsdk.SBfunctions.generateDom('wysiwyg', {\"wrapperClass\": 'hello', \"class\": 'class-editor' , \"Title\": 'title',\"required\":1, \"value\": '<h2>Hello</h2><p>world!</p>'});\njQuery('body').append(dom);\nSBsdk.SBfunctions.refresh();      \n\n\n\n\n\n\nLINK\n\n\nParameters:\n  \n\n  ~~~~~~~~~~~~ \n\n\ntype = 'link';\noptions = {\n  wrapperClass: 'wrapper-class',\n  class: 'class', //(REQUIRED)\n  Title: 'title',\n  download : 1, \n  href: '',\n  id: '',\n  target: '',\n  wrapper: 1, // if you want a link with no wrapper .. remove the wrapper option\n  type:'' // can be \"btn\", \"delete\" or \"add\" (this option is for the BO)\n};\n\n\n\n\n\n\nFIELDSET\n\n\nParameters:\n  \n\n  ~~~~~~~~~~~~ \n\n\ntype = 'fieldset';\noptions = {\n  wrapperClass: 'wrapper-class',\n  mainTitle: 'mainTitle',\n  subTitle: 'subTitle',\n  content: dom,\n  opensManyAtaTime: 1, // dont put this option if what was wanted is to open one fieldset at a time\n};\n\n\n\n\n\n\nBUTTON\n\n\nParameters:\n  \n\n  ~~~~~~~~~~~~ \n\n\ntype = 'button';\noptions = {\n  Title: 'Title',\n  class: 'class',\n  id: 'id',\n};\n\n\n\n\n\n\nExamples\n\n\n//Ex Radio\n\nwindow.SBsdk.SBfunctions.generateDom('radio', {\n \"wrapperClass\": 'hellooooo', // wrapper class\n\"name\" : \"name_radios[name_radios]\" , // (required) name that is provided for all the radio inputs \n   data: [ \n     {\"Title\":'ok', \"class\": 'ddd', \"id\": 'dddff',  \"value\":  1, \"checked\": 1},\n     {\"Title\": 'ok1', \"class\": 'aaa', \"id\": 'ssd', \"value\": 0}\n   ]\n});\n\n\n\n//Ex. checkboxes:\n\nwindow.SBsdk.SBfunctions.generateDom('checkbox', {\n  \"wrapperClass\": 'hellooooo',\n  \"toggle\": 1, // optional in case you wanted a toggle like checkbox\n   data: [ \n     {\"Title\":'ok', \"class\": 'ddd', \"id\": 'dddff',  \"value\":  1, \"checked\": 1},\n     {\"Title\": 'ok1', \"class\": 'aaa', \"id\": 'ssd', \"value\": 0, \"disabled\": 1}\n   ]\n});\n\n\n//Ex. text field     \n\nwindow.SBsdk.SBfunctions.generateDom('textfield', {\n      wrapperClass: 'sb-manage-input',\n      Title: 'Title',\n      required: 1,\n      placeholder: 'placeholder',\n      id: 'i-am-an-id',\n      name: 'hello',\n      size: 60,\n      maxlength: 255,\n      value: 'default value'\n});\n\n// this will generate                  \n// <input class=\"text-full form-control form-text  required \" placeholder=\"placeholder\" type=\"text\" id=\"i-am-an-id\" name=\"hello\" value=\"default value\" size=\"60\" maxlength=\"255\"> \n\n\n//Ex. Fieldsets\nwindow.SBsdk.SBfunctions.generateDom('fieldset', {\n      wrapperClass: 'fieldset-custom-wrapper', \n      mainTitle: 'Hello fieldset',\n      subTitle: '<img ..><img ..>',\n      content: 'fieldset content fieldset content fieldset content '\n});\n\n\n//Ex. normal select      \n\n window.SBsdk.SBfunctions.generateDom('select', {\n       required:1,\n       Title : 'hello select',\n       wrapperClass: 'select-dummy-wrapper-class',\n       class: 'select-dummy-class',\n       id: 'id-select',\n       options: [\n           {'value': 'one', 'label' : 'one'},\n           {'value': 'two', 'selected' : 'selected' , 'label' : 'two'}\n       ]\n});                                  \n// this will generate                    \n// <div class=\"form-item form-type-select form-group select-dummy-wrapper-class \"><label class=\"control-label\" for=\"id-select\">hello select <span class=\"form-required\" title=\"This field is required.\">*</span> </label><select class=\" select-dummy-class \" id=\" id-select \"><option \"=\"\" value=\"one\">one</option><option \"=\"\" value=\"two\" selected=\"selected\">two</option></select></div>           \n\n//Ex. for a select2 library -- select2\n// before to $('select').select2(options) where options = {'dropdownCssClass':'sb-intro-theme-drop'}     \n\n// After:     \n\nwindow.SBsdk.SBfunctions.generateDom('select', {\n  select2: {'dropdownCssClass':'sb-intro-theme-drop'} ,\n  options: [\n     {'value': 'one', 'label' : 'one'},\n     {'value': 'two', 'selected' : 'selected' , 'label' : 'two'}\n  ]\n});\n\n//if you want a normal select field dont add {{select2}} option   \n// if you want the select2 but you dont have options for it:     select2: {}      \n\n//Ex. Multiple select2\n\n\nwindow.SBsdk.SBfunctions.generateDom('select', {\n  select2: {} , // Dont include if you want a normal multiple select\n  multiple: 1,\n  name : 'multi[]',\n  options: [\n     {'value': 'one', 'label' : 'one'},\n     {'value': 'two', 'selected' : 'selected' , 'label' : 'two'}\n  ]\n});\n\n//Ex. Multiple select2 widget:\n\nwindow.SBsdk.SBfunctions.generateDom('select', {\n  select2: {} , // Dont include if you want a normal multiple select\n  multiple: 1,\n  name : 'multi[]',\n  widget: {\n            emptyText: 'Type To Add A new X', \n            addButtonClass: 'add-x-functionality'\n  },\n  options: [\n     {'value': 'one', 'label' : 'one'},\n     {'value': 'two', 'selected' : 'selected' , 'label' : 'two'}\n  ]\n});\n\n//Ex. Multiple select2 widget:\n\nwindow.SBsdk.SBfunctions.generateDom('select', {\n  select2: {\n     image:1,\n     dropDownCss: 'drop-down-class',\n  } , // Dont include if you want a normal multiple select\n  multiple: 1,\n  name : 'multi[]',\n  widget: {\n            emptyText: 'Type To Add A new X', \n            addButtonClass: 'add-x-functionality'\n  },\n  options: [\n     {\n      'value': 'one', \n      'label' : 'one',\n       class: 'class1',\n       imageSelect2: 'https://../img-url.png',\n       customHtml : '<div>Good bye</div>'\n     },\n\n     {'value': 'two',\n      'selected' : 'selected' ,\n       class: 'class2',\n      'label' : 'two',\n       imageSelect2: 'https://../img-url.png',\n       customHtml : '<div>Good Morning</div>'\n     }\n  ]\n});\n\n//Ex. Image upload:\n\nwindow.SBsdk.SBfunctions.generateDom('image_upload', {\n  Title: Image Upload Section Title , // Title of the upload\n  TitleClass: 'image-upload-section-title-class'  , // class of the title\n  multiple: 1, // if we want to upload multiple images (dont use if you want a single image uploader)\n  wrapperId : 'wrapper-Id-of-the-image-uploader', \n  inputFileData: { // info needed for the input type file (that uploads the image)\n            name: 'a', \n            id: 'hello',\n            max: '1234556',\n            size: '1234',\n  },\n  uploadFileData: { // upload button that is clicked automatically after the upload\n            name: 'a1', \n            id: 'hello1',\n  },             \n  // *values* is used if there are already existing images added         \n  // if multiple image upload then:          \n  values: [\n    {viewImgData:{ width, height, src, alt }, deleteFileData:{ id, name}, muliple:1 },\n    { viewImgData:{ width, height, src, alt }, deleteFileData:{ id, name}, muliple:1},\n    { viewImgData:{ width, height, src, alt }, deleteFileData:{ id, name}, muliple:1 },\n  ]       \n   // if single image upload\n   values: { viewImgData:{ width, height, src, alt }, deleteFileData:{ id, name} }          \n  //(Where viewImgData is all the information for the image)\n  //(and   deleteFileData is all the information for the delete button of the image)\n  // and *multiple* is required for muliple image upload    \n});\n\nwysiwyg example:        \n\nwindow.SBsdk.SBfunctions.generateDom('wysiwyg', {\"wrapperClass\": 'hello', \"class\": 'class-editor' , \"Title\": 'title',\"required\":1, \"value\": '<h2>Hello</h2><p>world!</p>'});",
            "title": "DOM Generation & Management"
        },
        {
            "location": "/sdk/dom-generation/#bo-titles",
            "text": "Preview: (SECTION TITLE)          \n  ~~~~~~~~~~~~~~~~~~~~                             Parameters: (SECTION TITLE):    \n  ~~~~~~~~~~~~~~~~~~~~   type = 'section_title';\noptions = {\n  Title: 'Title',\n};  Preview: (SECTION SUBTITLE) :             \n  ~~~~~~~~~~~~~~~~~~~~~~~~~                              Parameters: (SECTION SUBTITLE)    \n  ~~~~~~~~~~~~~~~~~~~~~~~   type = 'section_subtitle';\noptions = {\n  Title: 'Title',\n};",
            "title": "BO - TITLES"
        },
        {
            "location": "/sdk/dom-generation/#bo-sticky-action-buttons",
            "text": "Preview:   \n  ~~~~~~      Parameters:    \n  ~~~~~~~~~~~~   type = 'sticky_action_buttons';\n\noptions = [\n  {type: '', class: '', id: '', Title: ''},\n  ...\n];  where:      \n-  type  can be  btn ,  del-btn  or  cancel                \n-  notes:      \n--  type  cancel  is a  link  by default it will have  CANCEL title .              \n--  type  del-btn  by default will have  Delete title . It doesnt have an id option, the first delete button added will have a delete widget to confirm deletion.  Example:    window.SBsdk.SBfunctions.generateDom('sticky_action_buttons', [\n  {type: 'btn', class: 'class-1', id: 'id-1', Title: 'save-1'},\n  {type: 'btn', class: 'class-2', id: 'id-2', Title: 'save-2'},\n  {type: 'del-btn', class: 'class-del-1'}, // titles for del btns are optional   |||   no ids for del\n  {type: 'del-btn', class: 'class-del-1'}, // titles for del btns are optional   |||   no ids for del\n  {type: 'cancel', class: 'class-link-1' , id: 'idddd', Title: 'ssss'} // titles for cancels are optional\n]);",
            "title": "BO - STICKY ACTION BUTTONS"
        },
        {
            "location": "/sdk/dom-generation/#bo-radio",
            "text": "Preview:   \n  ~~~~~~      Parameters:    \n  ~~~~~~~~~~~~   type = 'radio';\n\noptions = {\n  wrapperClass: 'wrapperClass', //(REQUIRED)\n  name: 'common-for-all-radios', //(REQUIRED)\n  disabled: 1,\n  data: [\n    {\"Title\":'', \"class\":'', \"id\": '', \"value\": '', \"checked\" : 1},\n    {\"Title\", \"class\", \"id\", \"value\"}\n  ]\n};  Helper Functions: \n  ~~~~~~~~~~~~   - Radios actions: (ie. radio that is generated using generateDom):  SBsdk.SBfunctions.radio_action(inputSelector_wrapperSelector, action);         \nwhere:   \n-  action  can be  reset, disable, enable or check        \n- for the actions  reset, disable, enable  the inputSelector_wrapperSelector should be the wrapperClass of the radios           \n- for the action  check  the inputSelector_wrapperSelector should be the radio input          note that when radios are disabled you can not check radios                 Example:                          SBsdk.SBfunctions.radio_action('.shopbuilder-radio', 'reset');\nSBsdk.SBfunctions.radio_action('.shopbuilder-radio', 'disable');\nSBsdk.SBfunctions.radio_action('.shopbuilder-radio', 'enable');\nSBsdk.SBfunctions.radio_action('.shopbuilder-radio input:last', 'check');",
            "title": "BO - RADIO"
        },
        {
            "location": "/sdk/dom-generation/#bo-checkbox",
            "text": "Preview:     \n  ~~~~~~    Parameters:    \n  ~~~~~~~~~~~~   type = 'checkbox';\n\noptions = {\n  wrapperClass: 'wrapperClass',\n  toggle: 1, // to transform it into a switch checkbox\n  data: [\n    {\"Title\":'', \"class\":'', \"id\":'',  \"name\":'', \"value\":'', \"checked\":1, \"disabled\":1},\n    {\"Title\":'', \"class\":'', \"id\":'',  \"name\":'', \"value\":'', \"checked\":1, \"disabled\":1}\n  ]\n};  Helper Functions: \n  ~~~~~~~~~~~~   - Checkbox actions: (ie. checkbox that is generated using generateDom):     SBsdk.SBfunctions.checkbox_action(inputSelector, action);                       Where:          \n-  inputSelector : ex \"input.input-selector\" OR \"input#input-selector\"                 \n-  action : enable, disable, check, uncheck                 Example:                  SBsdk.SBfunctions.checkbox_action('.input-selector', 'uncheck');        \nSBsdk.SBfunctions.checkbox_action('.input-selector', 'check');        \nSBsdk.SBfunctions.checkbox_action('.input-selector', 'disable');        \nSBsdk.SBfunctions.checkbox_action('.input-selector', 'enable');",
            "title": "BO - CHECKBOX"
        },
        {
            "location": "/sdk/dom-generation/#bo-image-widget",
            "text": "Preview:     \n   ~~~~~~~  Parameters:    \n  ~~~~~~~~~~~~   type = 'image_upload';\n\noptions = {\n  Title: 'Title',\n  TitleClass: 'TitleClass',\n  wrapperId: 'wrapperId',\n  multiple : 1,\n  inputFileData:{ max, id, name, size, class }, // the input of type file data\n  deleteFileData:{name, id, class}, // the delete btn data\n  uploadFileData:{ name, id, class}, // the upload btn data\n  values : [{..},{..}]\n  // check example to see how to populate this;\n  //note that it can be an array of objs (multple image upload) or an array (single image)\n};  Helper Events:       \n  ~~~~~~~~~~~~   -  image_uploader  EVENT:       \nThis event is used to allow 3rd party apps to respond to the uploaded file  $(document).on(\"image_uploader\",function(event) {\n  // you will find the following data\n  console.log(event.input_file_selector); // the input dom reference of the file input.\n  console.log(event.image_correct_base64);  // returns the correct orientation of image using its exif data.\n  console.log(event.fileObj); // the file object.\n});",
            "title": "BO - IMAGE WIDGET"
        },
        {
            "location": "/sdk/dom-generation/#bo-mini-table-image-uploader",
            "text": "Preview:           \n   ~~~~~~~         Parameters:    \n  ~~~~~~~~~~~~   type = 'mini_multi_image_uploader';\n\noptions = {\"wrapperId\": 'id', \"wrapperClass\": 'class', // class and id of the main container of the widget\n saveSpaceForImages : 1, // option to be able to collapse images or else they will be uploaded one after the other\n inputFileData:{class: 'input-class', id :'input-id', size: '' }, // the class id and size for the input of type file\n values : [ // if there are already images that have been uploaded and wanted to display them on page load \n    { \n      wrapperClass: '', // wrapper class of the image\n      viewImgData:{ width, height, src, alt, fid, class}, // data of the image\n      deleteFileData:{class} // class of the delete button\n    }, // 1st image\n    { \n      wrapperClass: '', // wrapper class of the image\n      viewImgData:{ width, height, src, alt, fid, class}, // data of the image\n      deleteFileData:{class} // class of the delete button\n    }, // 2nd image\n    { \n      wrapperClass: '', // wrapper class of the image\n      viewImgData:{ width, height, src, alt, fid, class}, // data of the image\n      deleteFileData:{class} // class of the delete button\n    }, // 3rd image\n    ...\n  ],\n};  Helper Events:       \n  ~~~~~~~~~~~~   -  mini_image_uploader  EVENT:       \nThis event is used to allow 3rd party apps to respond to the uploaded file  $(document).on(\"mini_image_uploader\",function(event) {\n  // you will find the following data\n  console.log(event.action); // upload\n  console.log(event.error);  // the error message - incase upload is of an unallowed extension\n  console.log(event.success); // incase of success of the upload ie. {'filename': filename.extension, 'file': base64Url, wrapperSelector: wrapperOfImage}\n});  Helper Functions: \n  ~~~~~~~~~~~~   - Mini uploader actions:     SBsdk.SBfunctions.mini_multi_image_uploader_actions(wrapperSelector, action, data);                       Parameters:    \n-  action  can be  add_image  or  del_image           \n-  wrapperSelector : if  action = add_image  then  wrapperSelector  is the  main wrapper of the whole image widget  else if  action = del_image  then it is the  wrapper of the image being deleted         \n-  data : if  action = add_image  then data is the data of the images to be added  data : [\n  { \n    wrapperClass: '', // wrapper class of the image\n    viewImgData:{ width, height, src, alt, fid, class}, // data of the image\n    deleteFileData:{class} // class of the delete button\n  }, // 1st image\n  { \n    wrapperClass: '', // wrapper class of the image\n    viewImgData:{ width, height, src, alt, fid, class}, // data of the image\n    deleteFileData:{class} // class of the delete button\n  }, // 2nd image\n  { \n    wrapperClass: '', // wrapper class of the image\n    viewImgData:{ width, height, src, alt, fid, class}, // data of the image\n    deleteFileData:{class} // class of the delete button\n  }, // 3rd image\n  ...\n]    else if  action = del_image  then data can be  'success'  or  'fail'  to be able to remove the image being deleted or remove the throbber effect on it               Example:                  // step1 add the image widget to the dom.\noutput = window.SBsdk.SBfunctions.generateDom('mini_multi_image_uploader', options);\n$('body').append(output);\n// if it doesnt work out of the box .. you should refresh the sdk libraries or use them in the sdk callbacks\n// step2 refresh\nSBsdk.SBfunctions.refresh();\n// step3 act on upload to save your file\n$(document).on(\"mini_image_uploader\",function(event) {\n  // you will find the following data\n  console.log(event.action); // upload\n  console.log(event.error);  // the error message - incase upload is of an unallowed extension\n  console.log(event.success); // incase of success of the upload ie. {'filename': filename.extension, 'file': base64Url, wrapperSelector: wrapperOfImage}\n  if(event.action == 'upload'){\n    if(typeof event.error !== 'undefined'){\n      // do something incase of error (maybe display the message)\n      alert(event.error);\n    }\n    if(typeof event.success !== 'undefined'){\n      // save the file in your files in case of success\n      //you will have\n      // file name being uploaded event.success.filename\n      // file base64url event.success.file\n      // referance of the wrapper of the whole image widget event.success.wrapperSelector\n      if(you_have_saved_it_successfully(event.success)){\n        // APPEND YOUR IMG\n        new_img_data = [\n          { \n            wrapperClass: 'new-img',\n            viewImgData:{src: img_src},\n            deleteFileData:{class: 'delete-btn-class'} // class of the delete button\n          }\n        ]  \n        window.SBsdk.SBfunctions.mini_multi_image_uploader_actions( event.success.wrapperSelector, 'add_image', new_img_data);\n      }\n    }\n  }\n});\n// step4 act on delete to del your file\n$(document).on('click', \".delete-btn-class\",function(event) {\n  // DELETE YOUR IMAGE \n\n  // if failed\n  //window.SBsdk.SBfunctions.mini_multi_image_uploader_actions($(this).closest('.image-wrapper'), 'del_image', 'fail');\n\n  // if success\n  window.SBsdk.SBfunctions.mini_multi_image_uploader_actions($(this).closest('.image-wrapper'), 'del_image', 'success');\n\n});",
            "title": "BO - MINI TABLE IMAGE UPLOADER"
        },
        {
            "location": "/sdk/dom-generation/#textfield",
            "text": "Parameters: \n  ~~~~~~~~~~~~   type = 'textfield';\noptions = {\n  wrapperClass: 'wrapper-class',\n  type: 'password' or 'date' or 'search'(\"search\" is BO specifc - to take the design of a search field), // if type is text dont put type option\n  class: 'class',\n  name: 'name',\n  value: 'value',\n  Title: 'title',\n  required: '1', // (don't use if not required)\n  placeholder: '',\n  id: '',\n  size: '',\n  maxleng: ''\n};  Helper Functions: \n  ~~~~~~~~~~~~   - The textfield type is date:  The following function will help you get or set the value in the date picker  function SBsdk.SBfunctions.date_actions(selector, action, value)            Selector  ex  Selector = '#inputSelector'  ||  Selector = '#inputSelector'            action  can be 'set' || 'get'             value  use in case of  action = 'set'  ex.  value= '12/13/2018'        Example:                        jQuery('body').append(window.SBsdk.SBfunctions.generateDom('textfield', {\n      wrapperClass: 'wrapper-date',\n      Title: 'Title',\n      type: 'date',\n      id: 'datee',\n      name: 'date',\n      maxlength: 255,\n})\n);\nSBsdk.SBfunctions.refresh();\nSBsdk.SBfunctions.date_actions('#datee', 'set', '5/30/1994');\nconsole.log(SBsdk.SBfunctions.date_actions('#datee', 'get'));",
            "title": "TEXTFIELD"
        },
        {
            "location": "/sdk/dom-generation/#select",
            "text": "Preview:      \n ~~~~~~  -single select:               -multiple select:                          Parameters:    \n  ~~~~~~~~~~~~   type = 'select';\noptions = {\n  wrapperClass: 'wrapper-class',\n  class: 'class',\n  name: 'name', // required for a multi select\n  Title: 'title',\n  required: '1', // (don't use if not required)\n  id: '',\n  multiple: 1, // multiple select (don't use if not multiple)\n  options: [{value: '', selected: 1, label: '', class:''}, ..],\n};",
            "title": "SELECT"
        },
        {
            "location": "/sdk/dom-generation/#special-select",
            "text": "Preview:   \n ~~~~~~~  -single select:          -multi select:          Parameters:       \n  ~~~~~~~~~~~~   type = 'select';\noptions = {\n  wrapperClass: 'wrapper-class',\n  class: 'class',\n  name: 'name', // required for a multi select\n  Title: 'title',\n  required: '1', // (don't use if not required)\n  id: '',\n  multiple: 1, // multiple select (don't use if not multiple)\n  options: [{value: '', selected: 1, label: '', class:''}, ..],\n\n  select2: {\n    dropdownCssClass: 'dropdownClass', // adds a class for the select dropdown\n    addAsterisk: defaultValueOfSelectField, // adds a '*' for the default value text \n    searchable: { // adds a search for the select\n      placeholder: 'hello' // the place holder text of the search\n    }\n  } \n};  Helper Functions: \n  ~~~~~~~~~~~~   1- Get and set the special select:           \nYou can simply get and set any special select using jQuery as any normal select tag:    Example:      // GET\n// where the .class is the class applied on the special-select SELECT tag.\njQuery('.class').val();\n\n// SET\njQuery('.class').val('option1');\n// to apply the set change simple trigger change\njQuery('.class').trigger('change');  2- Append and Remove new elements to any special select:              SBsdk.SBfunctions.select2_action(select_selector, action, array_of_options)       action  parameter can be  append  or  reset     where:      \n-  append  appends on existing options               \n-  reset  removes old options and adds new options              Example:  // normal options \noptions = [\n{class:'aa', value: 'abcd' , label: 'ra', imageSelect2: 'img-src.png',customHtml: ''},\n{class:'bb', value: 'abcdabcd', selected: 1, label: 'ma', imageSelect2: 'img-src.png',customHtml: 'editme'},\n{class:'cc', value: 'abcdabcdabcd', selected: 1, label: 'fa', imageSelect2: 'img-src.png',customHtml: 'editme'},\n];\n// parm(0) is the select_selector (\"class\") ex. \".selector_select\"\n// parm(1) is the action which is append..\n// parm(2) is the new options wanted to be appended..\nSBsdk.SBfunctions.select2_action('.selector_select', 'append', options);",
            "title": "SPECIAL SELECT"
        },
        {
            "location": "/sdk/dom-generation/#special-select-image-widget",
            "text": "Preview:   \n  ~~~~~~~       Parameters:    \n  ~~~~~~~~~~~~   type = 'select';\noptions = {\n  wrapperClass: 'wrapper-class',\n  class: 'class',\n  name: 'name', // required for a multi select\n  Title: 'title',\n  required: '1', // (don't use if not required)\n  id: '',\n  multiple: 1, // multiple select (don't use if not multiple)\n  options: [\n    {\n      value: '',\n      selected: 1,\n      label: '',\n      class:'',\n\n      imageSelect2: 'url', // the image url\n      customHtml: \"html\"  // some html that is added beside the option Label\n    },\n    ..\n  ],\n\n  select2: {\n    dropdownCssClass: 'dropdownClass', // adds a class for the select dropdown\n    addAsterisk: defaultValueOfSelectField, // adds a '*' for the default value text \n    searchable: { // adds a search for the select\n      placeholder: 'hello' // the place holder text of the search\n    },\n\n    image: 1\n  }\n};  Helper Functions: \n  ~~~~~~~~~~~~   Same helper functions of  special select",
            "title": "SPECIAL SELECT IMAGE WIDGET"
        },
        {
            "location": "/sdk/dom-generation/#special-select-widget",
            "text": "Preview:     \n ~~~~~~~   Parameters:    \n  ~~~~~~~~~~~~   type = 'select';\noptions = {\n  wrapperClass: 'wrapper-class',\n  class: 'class',\n  name: 'name', // required for a multi select\n  Title: 'title',\n  required: '1', // (don't use if not required)\n  id: '',\n  multiple: 1, // multiple select (don't use if not multiple)\n  options: [\n    {\n      value: '',\n      selected: 1,\n      label: '',\n      class:'',\n\n      imageSelect2: 'url', // the image url\n      customHtml: \"html\"  // some html that is added beside the option Label\n    },\n    ..\n  ],\n\n  select2: {\n    dropdownCssClass: 'dropdownClass', // adds a class for the select dropdown\n    image: 1\n  },\n\n  widget: { emptyText: 'no more results found', addButtonClass:'class-to-the-add-btn'} \n};  Helper Functions: \n  ~~~~~~~~~~~~   Same helper functions of  special select",
            "title": "SPECIAL SELECT WIDGET"
        },
        {
            "location": "/sdk/dom-generation/#upload",
            "text": "Parameters:    \n  ~~~~~~~~~~~~   type = 'upload';\noptions = {\n  wrapperClass: 'wrapper-class',\n  class: 'class',\n  name: 'name',\n  value: '',\n  Title: 'title',\n  required: '1', // (don't use if not required)\n  id: '',\n  size: ''\n};",
            "title": "UPLOAD"
        },
        {
            "location": "/sdk/dom-generation/#textarea",
            "text": "Parameters:    \n  ~~~~~~~~~~~~   type = 'textarea';\noptions = {\n  wrapperClass: 'wrapper-class',\n  class: 'class',\n  name: 'name',\n  value: '',\n  Title: 'title',\n  required: '1', // (don't use if not required)\n  id: '',\n  rows:'',\n  cols:'',\n  placeholder:'',\n  maxlength:''\n};",
            "title": "TEXTAREA"
        },
        {
            "location": "/sdk/dom-generation/#wysiwyg-text-editor",
            "text": "Preview:     \n  ~~~~~~  Parameters:    \n  ~~~~~~~~~~~~   type = 'wysiwyg';\noptions = {\n  wrapperClass: 'wrapper-class-of-wysiwyg',\n  class: 'class', //(REQUIRED)\n  Title: 'title',\n  required: '1', // (don't use if not required)\n  value: '', //(string contains markup --can be html)\n};  Helper Functions: \n  ~~~~~~~~~~~~   1- Get or Set the wysiwyg data:         var get_data = SBsdk.SBfunctions.wysiwyg_data(class_of_wysiwyg);  // gets the data      SBsdk.SBfunctions.wysiwyg_data(class_of_wysiwyg, 'set', HTML_data);  // set data         Example             SBsdk.SBfunctions.wysiwyg_data('.pop-up', 'set', '<p>hello</p>'); // sets the html inside the wysiwyg           \nvar get_data = SBsdk.SBfunctions.wysiwyg_data('.pop-up'); // returns the html inside the wysiwyg that is <p>hello</p>           2- Configure your wysiwyg:        To change the configuration of all of your wysiwyg use the function:       window.SBsdk.SBfunctions.wysiwyg_configuration(config);            A) by default you will have the configuration used in Shopbuilder platform that is                 config.toolbar = [[\"Bold\", \"Italic\", \"Underline\", \"JustifyLeft\", \"JustifyCenter\", \"JustifyRight\", \"JustifyBlock\", \"BidiLtr\", \"BidiRtl\", \"BulletedList\", \"NumberedList\", \"Outdent\", \"Indent\", \"Undo\", \"Redo\", \"Link\", \"Unlink\", \"Anchor\", \"base64image\", \"Cut\", \"Copy\", \"Paste\", \"PasteText\", \"PasteFromWord\", \"RemoveFormat\", \"Format\", \"FontSize\", \"video_filter\"]];  To get the SB config simply use:             config = '';          window.SBsdk.SBfunctions.wysiwyg_configuration(config);     Ex. Let's try it out together .. copy the following code into the console and voil\u00e0.           config = ''; // gets the configurations of sb\n// set the configuration\nwindow.SBsdk.SBfunctions.wysiwyg_configuration(config);\n// then insert your wysiwyg\ndom = window.SBsdk.SBfunctions.generateDom('wysiwyg', {\"wrapperClass\": 'hello', \"class\": 'class-editor' , \"Title\": 'title',\"required\":1, \"value\": '<h2>Hello</h2><p>world!</p>'});\njQuery('body').append(dom);\nSBsdk.SBfunctions.refresh();  B) To get ALL of the supported items in a wysiwyg          config = {};          window.SBsdk.SBfunctions.wysiwyg_configuration(config);                  SET     config = {};   \nThat is equivalent to:        config= {};\n      // Toolbar configuration generated automatically by the editor based on config.toolbarGroups.\n      config.toolbar = [\n        { name: 'document', groups: [ 'mode', 'document', 'doctools' ], items: [ 'Source', '-', 'Save', 'NewPage', 'Preview', 'Print', '-', 'Templates' ] },\n        { name: 'clipboard', groups: [ 'clipboard', 'undo' ], items: [ 'Cut', 'Copy', 'Paste', 'PasteText', 'PasteFromWord', '-', 'Undo', 'Redo' ] },\n        { name: 'editing', groups: [ 'find', 'selection', 'spellchecker' ], items: [ 'Find', 'Replace', '-', 'SelectAll', '-', 'Scayt' ] },\n        { name: 'forms', items: [ 'Form', 'Checkbox', 'Radio', 'TextField', 'Textarea', 'Select', 'Button', 'ImageButton', 'HiddenField' ] },\n        '/',\n        { name: 'basicstyles', groups: [ 'basicstyles', 'cleanup' ], items: [ 'Bold', 'Italic', 'Underline', 'Strike', 'Subscript', 'Superscript', '-', 'CopyFormatting', 'RemoveFormat' ] },\n        { name: 'paragraph', groups: [ 'list', 'indent', 'blocks', 'align', 'bidi' ], items: [ 'NumberedList', 'BulletedList', '-', 'Outdent', 'Indent', '-', 'Blockquote', 'CreateDiv', '-', 'JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock', '-', 'BidiLtr', 'BidiRtl', 'Language' ] },\n        { name: 'links', items: [ 'Link', 'Unlink', 'Anchor' ] },\n        { name: 'insert', items: [ 'Image', 'base64image', 'Flash', 'Table', 'HorizontalRule', 'Smiley', 'SpecialChar', 'PageBreak', 'Iframe' ] },\n        '/',\n        { name: 'styles', items: [ 'Styles', 'Format', 'Font', 'FontSize' ] },\n        { name: 'colors', items: [ 'TextColor', 'BGColor' ] },\n        { name: 'tools', items: [ 'Maximize', 'ShowBlocks' ] },\n        { name: 'others', items: [ '-' ] },\n        { name: 'about', items: [ 'About' ] }\n      ];\n      // Toolbar groups configuration.\n      config.toolbarGroups = [\n        { name: 'document', groups: [ 'mode', 'document', 'doctools' ] },\n        { name: 'clipboard', groups: [ 'clipboard', 'undo' ] },\n        { name: 'editing', groups: [ 'find', 'selection', 'spellchecker' ] },\n        { name: 'forms' },\n        '/',\n        { name: 'basicstyles', groups: [ 'basicstyles', 'cleanup' ] },\n        { name: 'paragraph', groups: [ 'list', 'indent', 'blocks', 'align', 'bidi' ] },\n        { name: 'links' },\n        { name: 'insert' },\n        '/',\n        { name: 'styles' },\n        { name: 'colors' },\n        { name: 'tools' },\n        { name: 'others' },\n        { name: 'about' }\n      ];  note that to use an image plugin you can use either:  base64image  or  Image              C) you can customize your configuration to get the desired wysiwyg         choose the items from the Supported items of the wysiwyg mentioned above in part (B)   Example :  // It should be the first function to execute before any wysiwyg injection        \nconfig= {};          \nconfig.toolbar = [[ 'Cut', 'Copy', 'Paste', 'PasteText', 'PasteFromWord', '-', 'Undo', 'Redo' ]];                  \nwindow.SBsdk.SBfunctions.wysiwyg_configuration(config);             \n\n// then insert your wysiwyg\ndom = window.SBsdk.SBfunctions.generateDom('wysiwyg', {\"wrapperClass\": 'hello', \"class\": 'class-editor' , \"Title\": 'title',\"required\":1, \"value\": '<h2>Hello</h2><p>world!</p>'});\njQuery('body').append(dom);\nSBsdk.SBfunctions.refresh();          To add a seperator between an item and another we use  '-':   Example : Try it out with us  // It should be the first function to execute before any wysiwyg injection        \nconfig= {};           \nconfig.toolbar = [[ 'Cut', 'Copy', '-', 'Undo', 'Redo' ]];                  \nwindow.SBsdk.SBfunctions.wysiwyg_configuration(config);             \n\n// then insert your wysiwyg\ndom = window.SBsdk.SBfunctions.generateDom('wysiwyg', {\"wrapperClass\": 'hello', \"class\": 'class-editor' , \"Title\": 'title',\"required\":1, \"value\": '<h2>Hello</h2><p>world!</p>'});\njQuery('body').append(dom);\nSBsdk.SBfunctions.refresh();          to group your items and devide them on lines: note that '/' will make add your items on a new line   Example:  Try it out  config= {};\n\n// create your groups\n\nconfig.toolbarGroups = [\n  { name: 'clipboard'},   // a clipboard group\n  '/',                    // new line\n  { name: 'basicstyles'}, // basicstyles group\n  { name: 'paragraph'}  // paragraph group\n];\n\n// add the items of each group\nconfig.toolbar = [\n  { name: 'clipboard', items: [ 'Cut', 'Copy', 'Paste', 'PasteText', 'PasteFromWord', '-', 'Undo', 'Redo' ] }, // for clipboard group the following items.\n  '/',  // new line\n  { name: 'basicstyles', items: [ 'Bold', 'Italic', 'Underline', 'Strike', 'Subscript', 'Superscript', '-', 'CopyFormatting', 'RemoveFormat' ] }, // for the basic styles\n  { name: 'paragraph', groups: [ 'list', 'indent', 'blocks', 'align', 'bidi' ], items: [ 'NumberedList', 'BulletedList', '-', 'Outdent', 'Indent', '-', 'JustifyLeft', 'JustifyCenter', 'JustifyRight'] } // for the paragraph\n];\n\nwindow.SBsdk.SBfunctions.wysiwyg_configuration(config);             \n\n// then insert your wysiwyg\ndom = window.SBsdk.SBfunctions.generateDom('wysiwyg', {\"wrapperClass\": 'hello', \"class\": 'class-editor' , \"Title\": 'title',\"required\":1, \"value\": '<h2>Hello</h2><p>world!</p>'});\njQuery('body').append(dom);\nSBsdk.SBfunctions.refresh();",
            "title": "WYSIWYG TEXT EDITOR"
        },
        {
            "location": "/sdk/dom-generation/#link",
            "text": "Parameters:    \n  ~~~~~~~~~~~~   type = 'link';\noptions = {\n  wrapperClass: 'wrapper-class',\n  class: 'class', //(REQUIRED)\n  Title: 'title',\n  download : 1, \n  href: '',\n  id: '',\n  target: '',\n  wrapper: 1, // if you want a link with no wrapper .. remove the wrapper option\n  type:'' // can be \"btn\", \"delete\" or \"add\" (this option is for the BO)\n};",
            "title": "LINK"
        },
        {
            "location": "/sdk/dom-generation/#fieldset",
            "text": "Parameters:    \n  ~~~~~~~~~~~~   type = 'fieldset';\noptions = {\n  wrapperClass: 'wrapper-class',\n  mainTitle: 'mainTitle',\n  subTitle: 'subTitle',\n  content: dom,\n  opensManyAtaTime: 1, // dont put this option if what was wanted is to open one fieldset at a time\n};",
            "title": "FIELDSET"
        },
        {
            "location": "/sdk/dom-generation/#button",
            "text": "Parameters:    \n  ~~~~~~~~~~~~   type = 'button';\noptions = {\n  Title: 'Title',\n  class: 'class',\n  id: 'id',\n};   Examples  //Ex Radio\n\nwindow.SBsdk.SBfunctions.generateDom('radio', {\n \"wrapperClass\": 'hellooooo', // wrapper class\n\"name\" : \"name_radios[name_radios]\" , // (required) name that is provided for all the radio inputs \n   data: [ \n     {\"Title\":'ok', \"class\": 'ddd', \"id\": 'dddff',  \"value\":  1, \"checked\": 1},\n     {\"Title\": 'ok1', \"class\": 'aaa', \"id\": 'ssd', \"value\": 0}\n   ]\n});\n\n\n\n//Ex. checkboxes:\n\nwindow.SBsdk.SBfunctions.generateDom('checkbox', {\n  \"wrapperClass\": 'hellooooo',\n  \"toggle\": 1, // optional in case you wanted a toggle like checkbox\n   data: [ \n     {\"Title\":'ok', \"class\": 'ddd', \"id\": 'dddff',  \"value\":  1, \"checked\": 1},\n     {\"Title\": 'ok1', \"class\": 'aaa', \"id\": 'ssd', \"value\": 0, \"disabled\": 1}\n   ]\n});\n\n\n//Ex. text field     \n\nwindow.SBsdk.SBfunctions.generateDom('textfield', {\n      wrapperClass: 'sb-manage-input',\n      Title: 'Title',\n      required: 1,\n      placeholder: 'placeholder',\n      id: 'i-am-an-id',\n      name: 'hello',\n      size: 60,\n      maxlength: 255,\n      value: 'default value'\n});\n\n// this will generate                  \n// <input class=\"text-full form-control form-text  required \" placeholder=\"placeholder\" type=\"text\" id=\"i-am-an-id\" name=\"hello\" value=\"default value\" size=\"60\" maxlength=\"255\"> \n\n\n//Ex. Fieldsets\nwindow.SBsdk.SBfunctions.generateDom('fieldset', {\n      wrapperClass: 'fieldset-custom-wrapper', \n      mainTitle: 'Hello fieldset',\n      subTitle: '<img ..><img ..>',\n      content: 'fieldset content fieldset content fieldset content '\n});\n\n\n//Ex. normal select      \n\n window.SBsdk.SBfunctions.generateDom('select', {\n       required:1,\n       Title : 'hello select',\n       wrapperClass: 'select-dummy-wrapper-class',\n       class: 'select-dummy-class',\n       id: 'id-select',\n       options: [\n           {'value': 'one', 'label' : 'one'},\n           {'value': 'two', 'selected' : 'selected' , 'label' : 'two'}\n       ]\n});                                  \n// this will generate                    \n// <div class=\"form-item form-type-select form-group select-dummy-wrapper-class \"><label class=\"control-label\" for=\"id-select\">hello select <span class=\"form-required\" title=\"This field is required.\">*</span> </label><select class=\" select-dummy-class \" id=\" id-select \"><option \"=\"\" value=\"one\">one</option><option \"=\"\" value=\"two\" selected=\"selected\">two</option></select></div>           \n\n//Ex. for a select2 library -- select2\n// before to $('select').select2(options) where options = {'dropdownCssClass':'sb-intro-theme-drop'}     \n\n// After:     \n\nwindow.SBsdk.SBfunctions.generateDom('select', {\n  select2: {'dropdownCssClass':'sb-intro-theme-drop'} ,\n  options: [\n     {'value': 'one', 'label' : 'one'},\n     {'value': 'two', 'selected' : 'selected' , 'label' : 'two'}\n  ]\n});\n\n//if you want a normal select field dont add {{select2}} option   \n// if you want the select2 but you dont have options for it:     select2: {}      \n\n//Ex. Multiple select2\n\n\nwindow.SBsdk.SBfunctions.generateDom('select', {\n  select2: {} , // Dont include if you want a normal multiple select\n  multiple: 1,\n  name : 'multi[]',\n  options: [\n     {'value': 'one', 'label' : 'one'},\n     {'value': 'two', 'selected' : 'selected' , 'label' : 'two'}\n  ]\n});\n\n//Ex. Multiple select2 widget:\n\nwindow.SBsdk.SBfunctions.generateDom('select', {\n  select2: {} , // Dont include if you want a normal multiple select\n  multiple: 1,\n  name : 'multi[]',\n  widget: {\n            emptyText: 'Type To Add A new X', \n            addButtonClass: 'add-x-functionality'\n  },\n  options: [\n     {'value': 'one', 'label' : 'one'},\n     {'value': 'two', 'selected' : 'selected' , 'label' : 'two'}\n  ]\n});\n\n//Ex. Multiple select2 widget:\n\nwindow.SBsdk.SBfunctions.generateDom('select', {\n  select2: {\n     image:1,\n     dropDownCss: 'drop-down-class',\n  } , // Dont include if you want a normal multiple select\n  multiple: 1,\n  name : 'multi[]',\n  widget: {\n            emptyText: 'Type To Add A new X', \n            addButtonClass: 'add-x-functionality'\n  },\n  options: [\n     {\n      'value': 'one', \n      'label' : 'one',\n       class: 'class1',\n       imageSelect2: 'https://../img-url.png',\n       customHtml : '<div>Good bye</div>'\n     },\n\n     {'value': 'two',\n      'selected' : 'selected' ,\n       class: 'class2',\n      'label' : 'two',\n       imageSelect2: 'https://../img-url.png',\n       customHtml : '<div>Good Morning</div>'\n     }\n  ]\n});\n\n//Ex. Image upload:\n\nwindow.SBsdk.SBfunctions.generateDom('image_upload', {\n  Title: Image Upload Section Title , // Title of the upload\n  TitleClass: 'image-upload-section-title-class'  , // class of the title\n  multiple: 1, // if we want to upload multiple images (dont use if you want a single image uploader)\n  wrapperId : 'wrapper-Id-of-the-image-uploader', \n  inputFileData: { // info needed for the input type file (that uploads the image)\n            name: 'a', \n            id: 'hello',\n            max: '1234556',\n            size: '1234',\n  },\n  uploadFileData: { // upload button that is clicked automatically after the upload\n            name: 'a1', \n            id: 'hello1',\n  },             \n  // *values* is used if there are already existing images added         \n  // if multiple image upload then:          \n  values: [\n    {viewImgData:{ width, height, src, alt }, deleteFileData:{ id, name}, muliple:1 },\n    { viewImgData:{ width, height, src, alt }, deleteFileData:{ id, name}, muliple:1},\n    { viewImgData:{ width, height, src, alt }, deleteFileData:{ id, name}, muliple:1 },\n  ]       \n   // if single image upload\n   values: { viewImgData:{ width, height, src, alt }, deleteFileData:{ id, name} }          \n  //(Where viewImgData is all the information for the image)\n  //(and   deleteFileData is all the information for the delete button of the image)\n  // and *multiple* is required for muliple image upload    \n});\n\nwysiwyg example:        \n\nwindow.SBsdk.SBfunctions.generateDom('wysiwyg', {\"wrapperClass\": 'hello', \"class\": 'class-editor' , \"Title\": 'title',\"required\":1, \"value\": '<h2>Hello</h2><p>world!</p>'});",
            "title": "BUTTON"
        }
    ]
}